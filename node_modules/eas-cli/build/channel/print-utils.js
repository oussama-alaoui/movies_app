"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.logChannelDetails = void 0;
const tslib_1 = require("tslib");
const assert_1 = tslib_1.__importDefault(require("assert"));
const chalk_1 = tslib_1.__importDefault(require("chalk"));
const log_1 = tslib_1.__importDefault(require("../log"));
const branch_mapping_1 = require("../rollout/branch-mapping");
const utils_1 = require("../update/utils");
const branch_mapping_2 = require("./branch-mapping");
function logChannelDetails(channel) {
    (0, branch_mapping_2.assertVersion)(channel, 0);
    (0, assert_1.default)((0, branch_mapping_2.hasEmptyBranchMap)(channel) || (0, branch_mapping_2.hasStandardBranchMap)(channel) || (0, branch_mapping_1.isRollout)(channel), 'Only standard branch mappings and rollouts are supported.');
    const branchDescription = channel.updateBranches.flatMap(branch => {
        const updateGroupWithBranchDescriptions = (0, utils_1.getUpdateGroupDescriptionsWithBranch)(branch.updateGroups);
        const maybeRollout = (0, branch_mapping_1.isRollout)(channel) ? (0, branch_mapping_1.getRollout)(channel) : null;
        let maybePercentOnBranch = undefined;
        if (maybeRollout) {
            maybePercentOnBranch =
                maybeRollout.rolledOutBranchId === branch.id
                    ? maybeRollout.percentRolledOut
                    : 100 - maybeRollout.percentRolledOut;
        }
        return updateGroupWithBranchDescriptions.map(({ branch, ...updateGroup }) => ({
            branch,
            branchRolloutPercentage: maybePercentOnBranch,
            update: updateGroup,
        }));
    });
    if (branchDescription.length === 0) {
        log_1.default.log(chalk_1.default.dim('No branches are pointed to this channel.'));
    }
    else {
        log_1.default.log(branchDescription
            .map(description => (0, utils_1.formatBranch)(description))
            .join(`\n\n${chalk_1.default.dim('———')}\n\n`));
    }
}
exports.logChannelDetails = logChannelDetails;
