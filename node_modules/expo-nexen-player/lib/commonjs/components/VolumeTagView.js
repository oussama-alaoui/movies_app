"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _reactNative = require("react-native");

var _SeekBar = _interopRequireDefault(require("./SeekBar"));

var _IconButton = _interopRequireDefault(require("./IconButton"));

var _ComponentUtil = require("../utils/ComponentUtil");

var _icons = require("../assets/icons");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const VolumeTagView = props => {
  const {
    volume: playerVolume,
    totalVolume,
    muted,
    isSeekable,
    theme,
    style,
    onVolumeSeekStart,
    onVolumeSeekUpdate,
    onVolumeSeekEnd,
    onVolumePress
  } = props;

  const [volume, setVolume] = _react.default.useState(0);

  const SEEK_WIDTH = 100;

  const seekBarTheme = _react.default.useMemo(() => {
    return {
      trackColor: theme === null || theme === void 0 ? void 0 : theme.barColor,
      totalTrackColor: theme === null || theme === void 0 ? void 0 : theme.underlayColor,
      thumbColor: theme === null || theme === void 0 ? void 0 : theme.thumbColor,
      cachedTrackColor: 'rgba(0,0,0,0)',
      thumbBorderColor: 'rgba(0,0,0,0)',
      thumbBorderWidth: 0,
      thumbBorderCornerRadius: 0,
      trackHeight: theme === null || theme === void 0 ? void 0 : theme.trackHeight,
      thumbSize: theme === null || theme === void 0 ? void 0 : theme.thumbSize,
      thumbCornerRadius: theme === null || theme === void 0 ? void 0 : theme.thumbCornerRadius
    };
  }, [theme]);

  const containerStyle = {
    width: SEEK_WIDTH + ((theme === null || theme === void 0 ? void 0 : theme.iconSize) + 20)
  };
  const seekStyle = {
    width: SEEK_WIDTH
  };

  const onSeekStart = _react.default.useCallback((value, totalValue, position) => {
    setVolume(value);
    onVolumeSeekStart === null || onVolumeSeekStart === void 0 ? void 0 : onVolumeSeekStart(value, totalValue, position);
  }, []);

  const onSeekUpdate = _react.default.useCallback((value, totalValue, position) => {
    setVolume(value);
    onVolumeSeekUpdate === null || onVolumeSeekUpdate === void 0 ? void 0 : onVolumeSeekUpdate(value, totalValue, position);
  }, []);

  const onSeekEnd = _react.default.useCallback((value, totalValue, position) => {
    setVolume(value);
    onVolumeSeekEnd === null || onVolumeSeekEnd === void 0 ? void 0 : onVolumeSeekEnd(value, totalValue, position);
  }, []);

  const onToggleVolume = () => {
    onVolumePress === null || onVolumePress === void 0 ? void 0 : onVolumePress();
  };

  _react.default.useEffect(() => {
    setVolume(playerVolume);
  }, [playerVolume]);

  return /*#__PURE__*/_react.default.createElement(_reactNative.View, {
    style: [styles.container, style, containerStyle]
  }, /*#__PURE__*/_react.default.createElement(_SeekBar.default, {
    style: [styles.seek, seekStyle],
    trackValue: volume,
    totalTrackValue: totalVolume,
    disableCachedTrack: true,
    disableThumbBorder: true,
    theme: seekBarTheme,
    isSeekable: isSeekable,
    onSeekStart: onSeekStart,
    onSeekUpdate: onSeekUpdate,
    onSeekEnd: onSeekEnd
  }), /*#__PURE__*/_react.default.createElement(_IconButton.default, {
    onPress: onToggleVolume
  }, muted ? /*#__PURE__*/_react.default.createElement(_icons.IconVolume, {
    size: theme === null || theme === void 0 ? void 0 : theme.iconSize,
    color: theme === null || theme === void 0 ? void 0 : theme.iconColor
  }) : (0, _ComponentUtil.getVolumeIcon)(volume, totalVolume, theme === null || theme === void 0 ? void 0 : theme.iconSize, theme === null || theme === void 0 ? void 0 : theme.iconColor)));
};

var _default = VolumeTagView;
exports.default = _default;
VolumeTagView.defaultProps = {
  volume: 50,
  totalVolume: 100,
  fullScreen: false
};

const styles = _reactNative.StyleSheet.create({
  container: {
    flexDirection: 'row',
    justifyContent: 'center',
    alignItems: 'center'
  },
  seek: {
    paddingVertical: 3
  }
});
//# sourceMappingURL=VolumeTagView.js.map