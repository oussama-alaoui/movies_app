"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _ModalView = _interopRequireDefault(require("./ModalView"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const SeekBarTipView = /*#__PURE__*/_react.default.forwardRef((props, ref) => {
  const {
    dimension,
    barHeight,
    heightPercentage,
    icon,
    parentStyle,
    style,
    theme
  } = props;

  const [state, setState] = _react.default.useState({
    showTip: false,
    tipText: '',
    autoHide: false,
    icon
  });

  const timer = _react.default.useRef();

  (0, _react.useImperativeHandle)(ref, () => ({
    updateState: newState => {
      setState({ ...state,
        ...newState
      });
    }
  }));
  const textStyle = {
    color: theme === null || theme === void 0 ? void 0 : theme.textColor,
    fontSize: theme === null || theme === void 0 ? void 0 : theme.textSize,
    fontFamily: theme === null || theme === void 0 ? void 0 : theme.font
  };
  const seekBarStyle = {
    backgroundColor: theme === null || theme === void 0 ? void 0 : theme.barColor,
    height: barHeight
  };
  const seekBarUnderlayStyle = {
    backgroundColor: theme === null || theme === void 0 ? void 0 : theme.underlayColor,
    height: dimension.height * heightPercentage
  };

  _react.default.useEffect(() => {
    if (state.autoHide) {
      if (timer.current) {
        clearTimeout(timer.current);
      }

      if (state.showTip) {
        timer.current = setTimeout(() => {
          setState({ ...state,
            showTip: false,
            tipText: ''
          });
        }, 1200);
      }
    }
  }, [state]);

  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, state.showTip && /*#__PURE__*/_react.default.createElement(_reactNative.View, {
    style: [styles.parent, parentStyle]
  }, /*#__PURE__*/_react.default.createElement(_ModalView.default, {
    style: [styles.container, style]
  }, /*#__PURE__*/_react.default.createElement(_reactNative.Text, {
    style: [styles.text, textStyle]
  }, state.tipText), /*#__PURE__*/_react.default.createElement(_reactNative.View, {
    style: styles.barContainer
  }, /*#__PURE__*/_react.default.createElement(_reactNative.View, {
    style: [styles.seekBarUnderlay, seekBarUnderlayStyle]
  }, /*#__PURE__*/_react.default.createElement(_reactNative.Animated.View, {
    style: [styles.seekBar, seekBarStyle]
  }))), /*#__PURE__*/_react.default.createElement(_reactNative.View, {
    style: styles.iconContainer
  }, state.icon))));
});

var _default = SeekBarTipView;
exports.default = _default;

const styles = _reactNative.StyleSheet.create({
  parent: {
    position: 'absolute',
    top: 0,
    bottom: 0,
    justifyContent: 'center',
    alignItems: 'center'
  },
  container: {
    paddingHorizontal: 12,
    paddingVertical: 12
  },
  barContainer: {
    paddingVertical: 4,
    justifyContent: 'center',
    alignItems: 'center'
  },
  seekBar: {
    position: 'absolute',
    width: 6,
    height: 60
  },
  seekBarUnderlay: {
    width: 6,
    height: 100,
    borderRadius: 3,
    overflow: 'hidden',
    justifyContent: 'flex-end'
  },
  text: {
    minWidth: 35,
    fontSize: 12,
    fontWeight: '600',
    textAlign: 'center',
    opacity: 0.8
  },
  iconContainer: {
    paddingHorizontal: 4,
    opacity: 0.8
  }
});
//# sourceMappingURL=SeekBarTipView.js.map