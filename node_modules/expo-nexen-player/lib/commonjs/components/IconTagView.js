"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _icons = require("../assets/icons");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const IconTagView = /*#__PURE__*/_react.default.forwardRef((props, ref) => {
  const {
    theme,
    style
  } = props;

  const [state, setState] = _react.default.useState({
    volumeIcon: /*#__PURE__*/_react.default.createElement(_icons.IconVolume, {
      size: theme === null || theme === void 0 ? void 0 : theme.iconSize,
      color: theme === null || theme === void 0 ? void 0 : theme.iconColor
    }),
    brightnessIcon: /*#__PURE__*/_react.default.createElement(_icons.IconSun1, {
      size: theme === null || theme === void 0 ? void 0 : theme.iconSize,
      color: theme === null || theme === void 0 ? void 0 : theme.iconColor
    }),
    repeatIcon: /*#__PURE__*/_react.default.createElement(_icons.IconRepeat, {
      size: theme === null || theme === void 0 ? void 0 : theme.iconSize,
      color: theme === null || theme === void 0 ? void 0 : theme.inactiveIconColor
    }),
    speedIcon: /*#__PURE__*/_react.default.createElement(_icons.IconZap, {
      size: theme === null || theme === void 0 ? void 0 : theme.iconSize,
      color: theme === null || theme === void 0 ? void 0 : theme.inactiveIconColor
    })
  });

  (0, _react.useImperativeHandle)(ref, () => ({
    updateState: newState => {
      setState({ ...state,
        ...newState
      });
    }
  }));
  const containerStyle = {
    height: theme === null || theme === void 0 ? void 0 : theme.height,
    borderRadius: theme === null || theme === void 0 ? void 0 : theme.cornerRadius,
    borderWidth: theme === null || theme === void 0 ? void 0 : theme.borderWidth,
    borderColor: theme === null || theme === void 0 ? void 0 : theme.borderColor,
    backgroundColor: theme === null || theme === void 0 ? void 0 : theme.backgroundColor
  };
  return /*#__PURE__*/_react.default.createElement(_reactNative.View, {
    style: [styles.container, containerStyle, style]
  }, /*#__PURE__*/_react.default.createElement(_reactNative.View, {
    style: styles.iconContainer
  }, state.volumeIcon), /*#__PURE__*/_react.default.createElement(_reactNative.View, {
    style: styles.iconContainer
  }, state.brightnessIcon), /*#__PURE__*/_react.default.createElement(_reactNative.View, {
    style: styles.iconContainer
  }, state.repeatIcon), /*#__PURE__*/_react.default.createElement(_reactNative.View, {
    style: styles.iconContainer
  }, state.speedIcon));
});

var _default = IconTagView;
exports.default = _default;

const styles = _reactNative.StyleSheet.create({
  container: {
    flexDirection: 'row',
    height: 18,
    borderRadius: 9,
    borderWidth: 1,
    justifyContent: 'center',
    alignItems: 'center',
    paddingHorizontal: 4
  },
  iconContainer: {
    paddingHorizontal: 2,
    opacity: 0.8
  }
});
//# sourceMappingURL=IconTagView.js.map