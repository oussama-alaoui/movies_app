"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _icons = require("../assets/icons");

var _ModalView = _interopRequireDefault(require("./ModalView"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const TipView = /*#__PURE__*/_react.default.forwardRef((props, ref) => {
  const {
    style,
    theme
  } = props;

  const [state, setState] = _react.default.useState({
    showTip: false,
    tipText: 'Tip Text',
    autoHide: true,
    withIcon: false,
    icon: /*#__PURE__*/_react.default.createElement(_icons.IconInfo, {
      size: 20,
      color: '#fafafa'
    })
  });

  const timeoutRef = _react.default.useRef();

  (0, _react.useImperativeHandle)(ref, () => ({
    updateState: newState => {
      setState({ ...state,
        ...newState
      });
    }
  }));
  const textStyle = {
    color: theme === null || theme === void 0 ? void 0 : theme.textColor,
    fontSize: theme === null || theme === void 0 ? void 0 : theme.textSize,
    fontFamily: theme === null || theme === void 0 ? void 0 : theme.font
  };

  _react.default.useEffect(() => {
    if (state.autoHide) {
      if (timeoutRef.current) {
        clearTimeout(timeoutRef.current);
      }

      if (state.showTip) {
        timeoutRef.current = setTimeout(() => {
          setState({ ...state,
            showTip: false,
            withIcon: false
          });
        }, 1200);
      }
    }
  }, [state]);

  _react.default.useEffect(() => {
    return () => {
      if (timeoutRef.current) {
        clearTimeout(timeoutRef.current);
      }
    };
  }, []);

  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, state.showTip && /*#__PURE__*/_react.default.createElement(_ModalView.default, {
    style: [styles.container, style]
  }, state.withIcon && /*#__PURE__*/_react.default.createElement(_reactNative.View, {
    style: styles.iconContainer
  }, state.icon), /*#__PURE__*/_react.default.createElement(_reactNative.Text, {
    style: [styles.text, textStyle]
  }, state.tipText)));
});

var _default = TipView;
exports.default = _default;

const styles = _reactNative.StyleSheet.create({
  container: {
    flexDirection: 'row'
  },
  iconContainer: {
    marginRight: 8
  },
  text: {
    fontSize: 20
  }
});
//# sourceMappingURL=TipView.js.map