"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const RIPPLE_ANIM_DURATION = 500;
const BLINK_ANIM_DURATION = 200;

const RippleView = /*#__PURE__*/_react.default.forwardRef((props, ref) => {
  const {
    style,
    containerStyle,
    rippleStyle,
    rippleSize,
    children
  } = props;

  const [tipText, setTipText] = _react.default.useState('');

  const rippleOpacity = _react.default.useRef(new _reactNative.Animated.Value(0)).current;

  const rippleScale = _react.default.useRef(new _reactNative.Animated.Value(0)).current;

  const blinkViewOpacity = _react.default.useRef(new _reactNative.Animated.Value(0)).current;

  (0, _react.useImperativeHandle)(ref, () => ({
    onPress: (newTipText, callback) => {
      startRippleAnimation(() => {
        callback === null || callback === void 0 ? void 0 : callback();
      });
      startBlinkAnimation();

      if (newTipText) {
        setTipText(newTipText);
      }
    }
  }));

  const startRippleAnimation = callback => {
    _reactNative.Animated.parallel([_reactNative.Animated.timing(rippleOpacity, {
      toValue: 0.7,
      duration: RIPPLE_ANIM_DURATION,
      useNativeDriver: false
    }), _reactNative.Animated.timing(rippleScale, {
      toValue: 1.2,
      duration: RIPPLE_ANIM_DURATION,
      useNativeDriver: false
    })]).start(_ref => {
      let {
        finished
      } = _ref;

      if (finished) {
        _reactNative.Animated.timing(rippleOpacity, {
          toValue: 0,
          duration: 300,
          useNativeDriver: false
        }).start(() => {
          rippleScale.setValue(0);
          callback === null || callback === void 0 ? void 0 : callback();
        });
      }
    });
  };

  const startBlinkAnimation = callback => {
    const animSequence = _reactNative.Animated.sequence([_reactNative.Animated.timing(blinkViewOpacity, {
      toValue: 0.8,
      duration: BLINK_ANIM_DURATION,
      easing: _reactNative.Easing.linear,
      useNativeDriver: true
    }), _reactNative.Animated.timing(blinkViewOpacity, {
      toValue: 0,
      duration: BLINK_ANIM_DURATION,
      easing: _reactNative.Easing.linear,
      useNativeDriver: true
    })]);

    let animation = _reactNative.Animated.loop(animSequence, {
      iterations: 2
    });

    animation.start(() => {
      callback === null || callback === void 0 ? void 0 : callback();
    });
  };

  return /*#__PURE__*/_react.default.createElement(_reactNative.View, {
    style: [styles.container, style],
    pointerEvents: "none"
  }, /*#__PURE__*/_react.default.createElement(_reactNative.Animated.View, {
    style: [styles.ripple, {
      width: rippleSize * 2,
      height: rippleSize * 2,
      borderRadius: rippleSize
    }, rippleStyle, {
      opacity: rippleOpacity,
      transform: [{
        scale: rippleScale
      }]
    }]
  }), /*#__PURE__*/_react.default.createElement(_reactNative.View, {
    style: [styles.innerContainer, containerStyle]
  }, /*#__PURE__*/_react.default.createElement(_reactNative.View, {
    style: {
      flex: 0.45
    }
  }), /*#__PURE__*/_react.default.createElement(_reactNative.View, {
    style: {
      flex: 0.55
    }
  }, /*#__PURE__*/_react.default.createElement(_reactNative.Animated.View, {
    style: [styles.flashContainer, {
      opacity: blinkViewOpacity
    }]
  }, children), /*#__PURE__*/_react.default.createElement(_reactNative.Animated.Text, {
    style: [styles.text, {
      opacity: blinkViewOpacity
    }]
  }, tipText))));
});

var _default = RippleView;
exports.default = _default;

const styles = _reactNative.StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center'
  },
  innerContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center'
  },
  ripple: {
    position: 'absolute',
    backgroundColor: 'rgba(250,250,250,0.3)'
  },
  flashContainer: {
    justifyContent: 'center',
    alignItems: 'center'
  },
  text: {
    fontSize: 14,
    fontWeight: '600',
    color: '#fafafa',
    margin: 6,
    textAlign: 'center'
  }
});
//# sourceMappingURL=RippleView.js.map