"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.withAnimation = void 0;

var _react = _interopRequireDefault(require("react"));

var _reactNative = require("react-native");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

const ANIMATION_DURATION = 350;
const USE_NATIVE_DRIVER = false;

const withAnimation = ComposedComponent => {
  const WrapperComponent = /*#__PURE__*/_react.default.forwardRef((props, ref) => {
    const {
      animateFrom,
      distance,
      style,
      ...composedComponentProps
    } = props;

    const opacity = _react.default.useRef(new _reactNative.Animated.Value(0)).current;

    const margin = _react.default.useRef(new _reactNative.Animated.Value(-distance)).current;

    const startComponentShowAnimation = callback => {
      _reactNative.Animated.parallel([_reactNative.Animated.timing(opacity, {
        toValue: 1,
        duration: ANIMATION_DURATION,
        useNativeDriver: USE_NATIVE_DRIVER
      }), _reactNative.Animated.timing(margin, {
        toValue: 0,
        duration: ANIMATION_DURATION,
        useNativeDriver: USE_NATIVE_DRIVER
      })]).start(callback);
    };

    const startComponentHideAnimation = callback => {
      _reactNative.Animated.parallel([_reactNative.Animated.timing(opacity, {
        toValue: 0,
        duration: ANIMATION_DURATION,
        useNativeDriver: USE_NATIVE_DRIVER
      }), _reactNative.Animated.timing(margin, {
        toValue: -distance,
        duration: ANIMATION_DURATION,
        useNativeDriver: USE_NATIVE_DRIVER
      })]).start(callback);
    };

    _react.default.useImperativeHandle(ref, () => ({
      show: callback => {
        startComponentShowAnimation(callback);
      },
      hide: callback => {
        startComponentHideAnimation(callback);
      }
    }));

    const wrapperStyle = {
      opacity,
      marginLeft: animateFrom === 'LEFT' ? margin : undefined,
      marginTop: animateFrom === 'TOP' ? margin : undefined,
      marginRight: animateFrom === 'RIGHT' ? margin : undefined,
      marginBottom: animateFrom === 'BOTTOM' ? margin : undefined
    };
    return /*#__PURE__*/_react.default.createElement(ComposedComponent, _extends({
      style: [style, wrapperStyle]
    }, composedComponentProps));
  });

  return WrapperComponent;
};

exports.withAnimation = withAnimation;
//# sourceMappingURL=withAnimation.js.map