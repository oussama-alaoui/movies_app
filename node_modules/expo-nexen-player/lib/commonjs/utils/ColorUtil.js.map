{"version":3,"names":["getAlphaColor","colorCode","alpha","color","startsWith","hexToRgba","rgbArray","replace","match","r","Number","g","b","a","formatRgb","removeHash","hex","charAt","slice","parseHex","nakedHex","isShort","length","twoDigitHexR","twoDigitHexG","twoDigitHexB","twoDigitHexA","hexToDecimal","parseInt","hexesToDecimals","toFixed","isNumeric","n","isNaN","parseFloat","String","isFinite","decimalObject","parameterA","parsedA","hashlessHex","hexObject"],"sources":["ColorUtil.ts"],"sourcesContent":["/**\n * Taken from https://www.npmjs.com/package/hex-to-rgba.\n */\n\nexport const getAlphaColor = (colorCode: string, alpha: number | string) => {\n  var color = 'rgba(250,250,250,1.0)';\n  if (colorCode) {\n    if (colorCode.startsWith('#')) {\n      color = hexToRgba(colorCode, alpha)\n    } else if (colorCode.startsWith('rgb')) {\n      var rgbArray = colorCode.replace(/\\s/g, '').match(/^rgba?\\((\\d+),(\\d+),(\\d+),?([^,\\s)]+)?/i);\n      if (rgbArray) {\n        var r = Number(rgbArray[1]);\n        var g = Number(rgbArray[2]);\n        var b = Number(rgbArray[3]);\n        var a = Number(rgbArray[4] || 1);\n        color = formatRgb({ r, g, b, a }, alpha);\n      }\n    }\n  }\n  return color\n};\n\nconst removeHash = (hex: string) => (hex.charAt(0) === '#' ? hex.slice(1) : hex);\n\nconst parseHex = (nakedHex: string) => {\n  const isShort = (\n    nakedHex.length === 3\n    || nakedHex.length === 4\n  );\n\n  const twoDigitHexR = isShort ? `${nakedHex.slice(0, 1)}${nakedHex.slice(0, 1)}` : nakedHex.slice(0, 2);\n  const twoDigitHexG = isShort ? `${nakedHex.slice(1, 2)}${nakedHex.slice(1, 2)}` : nakedHex.slice(2, 4);\n  const twoDigitHexB = isShort ? `${nakedHex.slice(2, 3)}${nakedHex.slice(2, 3)}` : nakedHex.slice(4, 6);\n  const twoDigitHexA = ((isShort ? `${nakedHex.slice(3, 4)}${nakedHex.slice(3, 4)}` : nakedHex.slice(6, 8)) || 'ff');\n\n  return {\n    r: twoDigitHexR,\n    g: twoDigitHexG,\n    b: twoDigitHexB,\n    a: twoDigitHexA,\n  };\n};\n\nconst hexToDecimal = (hex: string) => parseInt(hex, 16);\n\nconst hexesToDecimals = ({\n  r, g, b, a,\n}: { r: string, g: string, b: string, a: string }) => ({\n  r: hexToDecimal(r),\n  g: hexToDecimal(g),\n  b: hexToDecimal(b),\n  a: +((hexToDecimal(a) / 255).toFixed(2)),\n});\n\nconst isNumeric = (n: number | string) => !isNaN(parseFloat(String(n))) && isFinite(Number(n)); // eslint-disable-line no-restricted-globals, max-len\n\nconst formatRgb = (decimalObject: any, parameterA: number | string) => {\n  const {\n    r, g, b, a: parsedA,\n  } = decimalObject;\n  const a = isNumeric(parameterA) ? parameterA : parsedA;\n\n  return `rgba(${r}, ${g}, ${b}, ${a})`;\n};\n\nconst hexToRgba = (hex: string, a: number | string) => {\n  const hashlessHex = removeHash(hex);\n  const hexObject = parseHex(hashlessHex);\n  const decimalObject = hexesToDecimals(hexObject);\n\n  return formatRgb(decimalObject, a);\n};"],"mappings":";;;;;;;AAAA;AACA;AACA;AAEO,MAAMA,aAAa,GAAG,CAACC,SAAD,EAAoBC,KAApB,KAA+C;EAC1E,IAAIC,KAAK,GAAG,uBAAZ;;EACA,IAAIF,SAAJ,EAAe;IACb,IAAIA,SAAS,CAACG,UAAV,CAAqB,GAArB,CAAJ,EAA+B;MAC7BD,KAAK,GAAGE,SAAS,CAACJ,SAAD,EAAYC,KAAZ,CAAjB;IACD,CAFD,MAEO,IAAID,SAAS,CAACG,UAAV,CAAqB,KAArB,CAAJ,EAAiC;MACtC,IAAIE,QAAQ,GAAGL,SAAS,CAACM,OAAV,CAAkB,KAAlB,EAAyB,EAAzB,EAA6BC,KAA7B,CAAmC,yCAAnC,CAAf;;MACA,IAAIF,QAAJ,EAAc;QACZ,IAAIG,CAAC,GAAGC,MAAM,CAACJ,QAAQ,CAAC,CAAD,CAAT,CAAd;QACA,IAAIK,CAAC,GAAGD,MAAM,CAACJ,QAAQ,CAAC,CAAD,CAAT,CAAd;QACA,IAAIM,CAAC,GAAGF,MAAM,CAACJ,QAAQ,CAAC,CAAD,CAAT,CAAd;QACA,IAAIO,CAAC,GAAGH,MAAM,CAACJ,QAAQ,CAAC,CAAD,CAAR,IAAe,CAAhB,CAAd;QACAH,KAAK,GAAGW,SAAS,CAAC;UAAEL,CAAF;UAAKE,CAAL;UAAQC,CAAR;UAAWC;QAAX,CAAD,EAAiBX,KAAjB,CAAjB;MACD;IACF;EACF;;EACD,OAAOC,KAAP;AACD,CAjBM;;;;AAmBP,MAAMY,UAAU,GAAIC,GAAD,IAAkBA,GAAG,CAACC,MAAJ,CAAW,CAAX,MAAkB,GAAlB,GAAwBD,GAAG,CAACE,KAAJ,CAAU,CAAV,CAAxB,GAAuCF,GAA5E;;AAEA,MAAMG,QAAQ,GAAIC,QAAD,IAAsB;EACrC,MAAMC,OAAO,GACXD,QAAQ,CAACE,MAAT,KAAoB,CAApB,IACGF,QAAQ,CAACE,MAAT,KAAoB,CAFzB;EAKA,MAAMC,YAAY,GAAGF,OAAO,GAAI,GAAED,QAAQ,CAACF,KAAT,CAAe,CAAf,EAAkB,CAAlB,CAAqB,GAAEE,QAAQ,CAACF,KAAT,CAAe,CAAf,EAAkB,CAAlB,CAAqB,EAAlD,GAAsDE,QAAQ,CAACF,KAAT,CAAe,CAAf,EAAkB,CAAlB,CAAlF;EACA,MAAMM,YAAY,GAAGH,OAAO,GAAI,GAAED,QAAQ,CAACF,KAAT,CAAe,CAAf,EAAkB,CAAlB,CAAqB,GAAEE,QAAQ,CAACF,KAAT,CAAe,CAAf,EAAkB,CAAlB,CAAqB,EAAlD,GAAsDE,QAAQ,CAACF,KAAT,CAAe,CAAf,EAAkB,CAAlB,CAAlF;EACA,MAAMO,YAAY,GAAGJ,OAAO,GAAI,GAAED,QAAQ,CAACF,KAAT,CAAe,CAAf,EAAkB,CAAlB,CAAqB,GAAEE,QAAQ,CAACF,KAAT,CAAe,CAAf,EAAkB,CAAlB,CAAqB,EAAlD,GAAsDE,QAAQ,CAACF,KAAT,CAAe,CAAf,EAAkB,CAAlB,CAAlF;EACA,MAAMQ,YAAY,GAAI,CAACL,OAAO,GAAI,GAAED,QAAQ,CAACF,KAAT,CAAe,CAAf,EAAkB,CAAlB,CAAqB,GAAEE,QAAQ,CAACF,KAAT,CAAe,CAAf,EAAkB,CAAlB,CAAqB,EAAlD,GAAsDE,QAAQ,CAACF,KAAT,CAAe,CAAf,EAAkB,CAAlB,CAA9D,KAAuF,IAA7G;EAEA,OAAO;IACLT,CAAC,EAAEc,YADE;IAELZ,CAAC,EAAEa,YAFE;IAGLZ,CAAC,EAAEa,YAHE;IAILZ,CAAC,EAAEa;EAJE,CAAP;AAMD,CAjBD;;AAmBA,MAAMC,YAAY,GAAIX,GAAD,IAAiBY,QAAQ,CAACZ,GAAD,EAAM,EAAN,CAA9C;;AAEA,MAAMa,eAAe,GAAG;EAAA,IAAC;IACvBpB,CADuB;IACpBE,CADoB;IACjBC,CADiB;IACdC;EADc,CAAD;EAAA,OAE+B;IACrDJ,CAAC,EAAEkB,YAAY,CAAClB,CAAD,CADsC;IAErDE,CAAC,EAAEgB,YAAY,CAAChB,CAAD,CAFsC;IAGrDC,CAAC,EAAEe,YAAY,CAACf,CAAD,CAHsC;IAIrDC,CAAC,EAAE,CAAE,CAACc,YAAY,CAACd,CAAD,CAAZ,GAAkB,GAAnB,EAAwBiB,OAAxB,CAAgC,CAAhC;EAJgD,CAF/B;AAAA,CAAxB;;AASA,MAAMC,SAAS,GAAIC,CAAD,IAAwB,CAACC,KAAK,CAACC,UAAU,CAACC,MAAM,CAACH,CAAD,CAAP,CAAX,CAAN,IAAiCI,QAAQ,CAAC1B,MAAM,CAACsB,CAAD,CAAP,CAAnF,C,CAAgG;;;AAEhG,MAAMlB,SAAS,GAAG,CAACuB,aAAD,EAAqBC,UAArB,KAAqD;EACrE,MAAM;IACJ7B,CADI;IACDE,CADC;IACEC,CADF;IACKC,CAAC,EAAE0B;EADR,IAEFF,aAFJ;EAGA,MAAMxB,CAAC,GAAGkB,SAAS,CAACO,UAAD,CAAT,GAAwBA,UAAxB,GAAqCC,OAA/C;EAEA,OAAQ,QAAO9B,CAAE,KAAIE,CAAE,KAAIC,CAAE,KAAIC,CAAE,GAAnC;AACD,CAPD;;AASA,MAAMR,SAAS,GAAG,CAACW,GAAD,EAAcH,CAAd,KAAqC;EACrD,MAAM2B,WAAW,GAAGzB,UAAU,CAACC,GAAD,CAA9B;EACA,MAAMyB,SAAS,GAAGtB,QAAQ,CAACqB,WAAD,CAA1B;EACA,MAAMH,aAAa,GAAGR,eAAe,CAACY,SAAD,CAArC;EAEA,OAAO3B,SAAS,CAACuB,aAAD,EAAgBxB,CAAhB,CAAhB;AACD,CAND"}