"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.trackToSeekValue = exports.seekToTrackValue = exports.seekToOriginalValue = exports.originalToSeekValue = exports.clamp = exports.boundPosition = void 0;

var _reactNative = require("react-native");

const clamp = (value, lowerBound, upperBound) => {
  return Math.min(Math.max(lowerBound, value), upperBound);
};

exports.clamp = clamp;

const trackToSeekValue = (trackValue, totalTrackValue, seekWidth) => {
  const value = trackValue / totalTrackValue * seekWidth;

  if (isNaN(value)) {
    return 0;
  }

  return value;
};

exports.trackToSeekValue = trackToSeekValue;

const seekToTrackValue = (seekValue, totalTrackValue, seekWidth) => {
  const value = seekValue / seekWidth * totalTrackValue;

  if (isNaN(value)) {
    return 0;
  }

  return Math.round(value);
};

exports.seekToTrackValue = seekToTrackValue;

const originalToSeekValue = (originalValue, maxValue, seekHeight) => {
  const value = originalValue / maxValue * seekHeight;

  if (isNaN(value)) {
    return 0;
  }

  return Math.round(value);
};

exports.originalToSeekValue = originalToSeekValue;

const seekToOriginalValue = (seekValue, maxValue, seekHeight) => {
  const value = seekValue / seekHeight * maxValue;

  if (isNaN(value)) {
    return 0;
  }

  return Math.round(value);
};

exports.seekToOriginalValue = seekToOriginalValue;

const boundPosition = (position, seekWidth) => {
  const isRTL = _reactNative.I18nManager.isRTL;

  if (isRTL) {
    return clamp(position, seekWidth, 0);
  } else {
    return clamp(position, 0, seekWidth);
  }
};

exports.boundPosition = boundPosition;
//# sourceMappingURL=MathUtil.js.map