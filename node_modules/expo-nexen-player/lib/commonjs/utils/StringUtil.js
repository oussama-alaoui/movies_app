"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getForwardOrRewindTimeTipText = exports.getForOrRewTimeTipText = exports.getAspectRatioTipText = exports.formatTime = void 0;
exports.getKeyByValue = getKeyByValue;
exports.getTimeTipText = void 0;

var _expoAv = require("expo-av");

const formatTime = seconds => {
  let result = '';
  let h = Math.floor(seconds / 3600) < 10 ? Math.floor(seconds / 3600) : Math.floor(seconds / 3600);
  let m = Math.floor(seconds / 60 % 60) < 10 ? Math.floor(seconds / 60 % 60) : Math.floor(seconds / 60 % 60);
  let s = Math.floor(seconds % 60) < 10 ? '0' + Math.floor(seconds % 60) : Math.floor(seconds % 60);

  if (Math.floor(seconds / 3600) === 0) {
    result = `${m}:${s}`;
  } else {
    result = `${h}:${m}:${s}`;
  }

  return result;
};

exports.formatTime = formatTime;

const getAspectRatioTipText = text => {
  if (text == null || text.length == 0) {
    return '';
  }

  let tipText = text;

  if (tipText.includes('SURFACE_')) {
    tipText = tipText.replace('SURFACE_', '');

    if (tipText == '16_9' || tipText == '4_3') {
      tipText = tipText.replace('_', ':');
    } else {
      tipText = tipText.replace(/_/g, ' ');
    }
  } else {
    tipText = tipText.replace(/_/g, ' ');
  }

  return tipText;
};

exports.getAspectRatioTipText = getAspectRatioTipText;

const getTimeTipText = (time, totalTime) => {
  return `${formatTime(time)}/${formatTime(totalTime)}`;
};

exports.getTimeTipText = getTimeTipText;

const formatTimeTip = time => {
  let seconds = Math.abs(time);
  let m = Math.floor(seconds / 60 % 60) < 10 ? Math.floor(seconds / 60 % 60) : Math.floor(seconds / 60 % 60);
  let s = Math.floor(seconds % 60) < 10 ? '0' + Math.floor(seconds % 60) : Math.floor(seconds % 60);
  return `${m}:${s}`;
};

const getForwardOrRewindTimeTipText = (symbol, minTime, maxTime) => {
  return `${symbol}${formatTimeTip(minTime)} (${formatTimeTip(maxTime)})`;
};

exports.getForwardOrRewindTimeTipText = getForwardOrRewindTimeTipText;

const getForOrRewTimeTipText = (symbol, forwardTime, time) => {
  return `${symbol}${forwardTime}s (${formatTimeTip(time)})`;
};

exports.getForOrRewTimeTipText = getForOrRewTimeTipText;

function getKeyByValue(value) {
  var mode;

  switch (value) {
    case 'contain':
      mode = _expoAv.ResizeMode.CONTAIN;
      break;

    case 'cover':
      mode = _expoAv.ResizeMode.COVER;
      break;

    case 'stretch':
      mode = _expoAv.ResizeMode.STRETCH;
      break;

    default:
      mode = _expoAv.ResizeMode.CONTAIN;
  }

  return mode;
}
//# sourceMappingURL=StringUtil.js.map