import { I18nManager } from "react-native";
export const clamp = (value, lowerBound, upperBound) => {
  return Math.min(Math.max(lowerBound, value), upperBound);
};
export const trackToSeekValue = (trackValue, totalTrackValue, seekWidth) => {
  const value = trackValue / totalTrackValue * seekWidth;

  if (isNaN(value)) {
    return 0;
  }

  return value;
};
export const seekToTrackValue = (seekValue, totalTrackValue, seekWidth) => {
  const value = seekValue / seekWidth * totalTrackValue;

  if (isNaN(value)) {
    return 0;
  }

  return Math.round(value);
};
export const originalToSeekValue = (originalValue, maxValue, seekHeight) => {
  const value = originalValue / maxValue * seekHeight;

  if (isNaN(value)) {
    return 0;
  }

  return Math.round(value);
};
export const seekToOriginalValue = (seekValue, maxValue, seekHeight) => {
  const value = seekValue / seekHeight * maxValue;

  if (isNaN(value)) {
    return 0;
  }

  return Math.round(value);
};
export const boundPosition = (position, seekWidth) => {
  const isRTL = I18nManager.isRTL;

  if (isRTL) {
    return clamp(position, seekWidth, 0);
  } else {
    return clamp(position, 0, seekWidth);
  }
};
//# sourceMappingURL=MathUtil.js.map