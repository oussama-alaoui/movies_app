import React, { useImperativeHandle } from 'react';
import { StyleSheet, Text, View } from 'react-native';
import { IconInfo } from '../assets/icons';
import ModalView from './ModalView';
const TipView = /*#__PURE__*/React.forwardRef((props, ref) => {
  const {
    style,
    theme
  } = props;
  const [state, setState] = React.useState({
    showTip: false,
    tipText: 'Tip Text',
    autoHide: true,
    withIcon: false,
    icon: /*#__PURE__*/React.createElement(IconInfo, {
      size: 20,
      color: '#fafafa'
    })
  });
  const timeoutRef = React.useRef();
  useImperativeHandle(ref, () => ({
    updateState: newState => {
      setState({ ...state,
        ...newState
      });
    }
  }));
  const textStyle = {
    color: theme === null || theme === void 0 ? void 0 : theme.textColor,
    fontSize: theme === null || theme === void 0 ? void 0 : theme.textSize,
    fontFamily: theme === null || theme === void 0 ? void 0 : theme.font
  };
  React.useEffect(() => {
    if (state.autoHide) {
      if (timeoutRef.current) {
        clearTimeout(timeoutRef.current);
      }

      if (state.showTip) {
        timeoutRef.current = setTimeout(() => {
          setState({ ...state,
            showTip: false,
            withIcon: false
          });
        }, 1200);
      }
    }
  }, [state]);
  React.useEffect(() => {
    return () => {
      if (timeoutRef.current) {
        clearTimeout(timeoutRef.current);
      }
    };
  }, []);
  return /*#__PURE__*/React.createElement(React.Fragment, null, state.showTip && /*#__PURE__*/React.createElement(ModalView, {
    style: [styles.container, style]
  }, state.withIcon && /*#__PURE__*/React.createElement(View, {
    style: styles.iconContainer
  }, state.icon), /*#__PURE__*/React.createElement(Text, {
    style: [styles.text, textStyle]
  }, state.tipText)));
});
export default TipView;
const styles = StyleSheet.create({
  container: {
    flexDirection: 'row'
  },
  iconContainer: {
    marginRight: 8
  },
  text: {
    fontSize: 20
  }
});
//# sourceMappingURL=TipView.js.map