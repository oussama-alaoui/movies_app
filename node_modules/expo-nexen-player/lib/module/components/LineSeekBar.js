import React from 'react';
import { Animated, I18nManager, StyleSheet, View } from 'react-native';
import { boundPosition, trackToSeekValue } from '../utils/MathUtil';

const LineSeekBar = props => {
  const {
    trackTime,
    totalTrackTime,
    layoutWidth,
    theme
  } = props;
  const isRTL = I18nManager.isRTL;
  const rtlMultiplier = isRTL ? -1 : 1;
  const seekWidth = React.useRef(new Animated.Value(0)).current;
  const seekableDistance = React.useRef(0);
  React.useEffect(() => {
    seekableDistance.current = layoutWidth * rtlMultiplier;
    const position = boundPosition(trackToSeekValue(trackTime, totalTrackTime, seekableDistance.current), seekableDistance.current);
    seekWidth.setValue(position * rtlMultiplier);
  }, [trackTime, totalTrackTime, layoutWidth]);
  return /*#__PURE__*/React.createElement(View, {
    style: styles.container
  }, /*#__PURE__*/React.createElement(View, {
    style: [styles.totalTrack, {
      height: theme === null || theme === void 0 ? void 0 : theme.lineHeight,
      borderRadius: (theme === null || theme === void 0 ? void 0 : theme.lineHeight) / 2,
      backgroundColor: theme === null || theme === void 0 ? void 0 : theme.lineUnderlayColor
    }]
  }), /*#__PURE__*/React.createElement(Animated.View, {
    style: [styles.track, {
      width: seekWidth,
      height: theme === null || theme === void 0 ? void 0 : theme.lineHeight,
      borderRadius: (theme === null || theme === void 0 ? void 0 : theme.lineHeight) / 2,
      backgroundColor: theme === null || theme === void 0 ? void 0 : theme.lineColor
    }]
  }));
};

export default LineSeekBar;
const styles = StyleSheet.create({
  container: {
    position: 'absolute',
    left: 0,
    right: 0,
    bottom: 0,
    justifyContent: 'center',
    zIndex: 999
  },
  totalTrack: {
    position: 'absolute',
    width: '100%',
    height: 2,
    borderRadius: 1
  },
  track: {
    height: 2,
    borderRadius: 1
  }
});
//# sourceMappingURL=LineSeekBar.js.map