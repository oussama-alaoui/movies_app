import React from 'react';
import { FlatList, StyleSheet, Text, TouchableOpacity } from 'react-native';
import { IconFilm, IconReload, IconRepeat, IconUnlock, IconZap } from '../assets/icons';
import GradientView from './GradientView';
import { withAnimation } from '../hoc/withAnimation';
import ModalView from './ModalView';

const MoreControl = props => {
  var _nexenTheme$sizes, _nexenTheme$colors, _nexenTheme$colors2, _nexenTheme$sizes2, _nexenTheme$sizes3, _nexenTheme$fonts;

  const {
    style,
    fullScreen,
    disablePlaylistAndSkip,
    insets,
    playerConfig,
    nexenTheme,
    onItemPress
  } = props;
  const [moreItems, setMoreItems] = React.useState([]);
  const ICON_SIZE = nexenTheme === null || nexenTheme === void 0 ? void 0 : (_nexenTheme$sizes = nexenTheme.sizes) === null || _nexenTheme$sizes === void 0 ? void 0 : _nexenTheme$sizes.secondaryIconSize;
  const ICON_COLOR = nexenTheme === null || nexenTheme === void 0 ? void 0 : (_nexenTheme$colors = nexenTheme.colors) === null || _nexenTheme$colors === void 0 ? void 0 : _nexenTheme$colors.secondaryIconColor;
  const TEXT_COLOR = nexenTheme === null || nexenTheme === void 0 ? void 0 : (_nexenTheme$colors2 = nexenTheme.colors) === null || _nexenTheme$colors2 === void 0 ? void 0 : _nexenTheme$colors2.secondaryTextColor;
  const CONTAINER_VERTICAL_PADDING = fullScreen ? ((insets === null || insets === void 0 ? void 0 : insets.top) + (insets === null || insets === void 0 ? void 0 : insets.bottom)) / 2 > 0 ? ((insets === null || insets === void 0 ? void 0 : insets.top) + (insets === null || insets === void 0 ? void 0 : insets.bottom)) / 2 : nexenTheme === null || nexenTheme === void 0 ? void 0 : (_nexenTheme$sizes2 = nexenTheme.sizes) === null || _nexenTheme$sizes2 === void 0 ? void 0 : _nexenTheme$sizes2.paddingVertical : nexenTheme === null || nexenTheme === void 0 ? void 0 : (_nexenTheme$sizes3 = nexenTheme.sizes) === null || _nexenTheme$sizes3 === void 0 ? void 0 : _nexenTheme$sizes3.paddingVertical;
  React.useEffect(() => {
    const MORE_ITEMS = [{
      id: 'lock',
      icon: /*#__PURE__*/React.createElement(IconUnlock, {
        size: ICON_SIZE,
        color: ICON_COLOR
      }),
      label: 'Lock'
    }, {
      id: 'speed',
      icon: /*#__PURE__*/React.createElement(IconZap, {
        size: ICON_SIZE,
        color: ICON_COLOR
      }),
      label: 'Playback Speed'
    }, {
      id: 'repeat',
      icon: /*#__PURE__*/React.createElement(IconRepeat, {
        size: ICON_SIZE,
        color: ICON_COLOR
      }),
      label: 'Repeat Mode'
    }, {
      id: 'reload',
      icon: /*#__PURE__*/React.createElement(IconReload, {
        size: ICON_SIZE,
        color: ICON_COLOR
      }),
      label: 'Reload Video'
    } // {
    //   id: 'info',
    //   icon: <IconInfo size={ICON_SIZE} color={ICON_COLOR} />,
    //   label: 'Video Info',
    // },
    ];

    if (!disablePlaylistAndSkip && !(playerConfig !== null && playerConfig !== void 0 && playerConfig.disablePlayList)) {
      MORE_ITEMS.splice(3, 0, {
        id: 'playlist',
        icon: /*#__PURE__*/React.createElement(IconFilm, {
          size: ICON_SIZE,
          color: ICON_COLOR
        }),
        label: 'Video Playlist'
      });
    }

    setMoreItems(MORE_ITEMS);
  }, [playerConfig]);
  const containerStyle = {
    top: CONTAINER_VERTICAL_PADDING,
    bottom: CONTAINER_VERTICAL_PADDING,
    right: 0,
    paddingHorizontal: 0,
    paddingVertical: 0
  };
  const itemTextStyle = {
    color: TEXT_COLOR,
    fontFamily: nexenTheme === null || nexenTheme === void 0 ? void 0 : (_nexenTheme$fonts = nexenTheme.fonts) === null || _nexenTheme$fonts === void 0 ? void 0 : _nexenTheme$fonts.secondaryFont
  };

  const renderMoreItem = _ref => {
    let {
      item
    } = _ref;
    return /*#__PURE__*/React.createElement(TouchableOpacity, {
      style: styles.itemContainer,
      activeOpacity: 0.6,
      onPress: () => {
        onItemPress === null || onItemPress === void 0 ? void 0 : onItemPress(item);
      }
    }, item.icon, /*#__PURE__*/React.createElement(Text, {
      style: [styles.itemText, itemTextStyle]
    }, item.label));
  };

  return /*#__PURE__*/React.createElement(ModalView, {
    style: [styles.container, style, containerStyle]
  }, /*#__PURE__*/React.createElement(GradientView, {
    style: {
      height: '100%',
      width: '100%'
    },
    startPoint: {
      x: 0,
      y: 0
    },
    endPoint: {
      x: 1,
      y: 0
    },
    startOpacity: 0.0,
    middleOpacity: 0.2,
    endOpacity: 0.5
  }), /*#__PURE__*/React.createElement(TouchableOpacity, {
    style: styles.listContainer,
    activeOpacity: 1
  }, /*#__PURE__*/React.createElement(FlatList, {
    keyExtractor: item => item.id,
    data: moreItems,
    renderItem: renderMoreItem
  })));
};

export default withAnimation(MoreControl);
MoreControl.defaultProps = {};
const styles = StyleSheet.create({
  container: {
    zIndex: 110,
    overflow: 'hidden'
  },
  listContainer: {
    position: 'absolute',
    left: 0,
    top: 0,
    right: 0,
    bottom: 0,
    paddingVertical: 8,
    paddingHorizontal: 8
  },
  itemContainer: {
    flex: 1,
    flexDirection: 'row',
    alignItems: 'flex-start',
    paddingHorizontal: 8,
    paddingVertical: 10
  },
  itemText: {
    fontSize: 15,
    marginLeft: 16
  }
});
//# sourceMappingURL=MoreControl.js.map