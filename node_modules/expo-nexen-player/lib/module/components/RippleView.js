import React, { useImperativeHandle } from 'react';
import { Animated, Easing, StyleSheet, View } from 'react-native';
const RIPPLE_ANIM_DURATION = 500;
const BLINK_ANIM_DURATION = 200;
const RippleView = /*#__PURE__*/React.forwardRef((props, ref) => {
  const {
    style,
    containerStyle,
    rippleStyle,
    rippleSize,
    children
  } = props;
  const [tipText, setTipText] = React.useState('');
  const rippleOpacity = React.useRef(new Animated.Value(0)).current;
  const rippleScale = React.useRef(new Animated.Value(0)).current;
  const blinkViewOpacity = React.useRef(new Animated.Value(0)).current;
  useImperativeHandle(ref, () => ({
    onPress: (newTipText, callback) => {
      startRippleAnimation(() => {
        callback === null || callback === void 0 ? void 0 : callback();
      });
      startBlinkAnimation();

      if (newTipText) {
        setTipText(newTipText);
      }
    }
  }));

  const startRippleAnimation = callback => {
    Animated.parallel([Animated.timing(rippleOpacity, {
      toValue: 0.7,
      duration: RIPPLE_ANIM_DURATION,
      useNativeDriver: false
    }), Animated.timing(rippleScale, {
      toValue: 1.2,
      duration: RIPPLE_ANIM_DURATION,
      useNativeDriver: false
    })]).start(_ref => {
      let {
        finished
      } = _ref;

      if (finished) {
        Animated.timing(rippleOpacity, {
          toValue: 0,
          duration: 300,
          useNativeDriver: false
        }).start(() => {
          rippleScale.setValue(0);
          callback === null || callback === void 0 ? void 0 : callback();
        });
      }
    });
  };

  const startBlinkAnimation = callback => {
    const animSequence = Animated.sequence([Animated.timing(blinkViewOpacity, {
      toValue: 0.8,
      duration: BLINK_ANIM_DURATION,
      easing: Easing.linear,
      useNativeDriver: true
    }), Animated.timing(blinkViewOpacity, {
      toValue: 0,
      duration: BLINK_ANIM_DURATION,
      easing: Easing.linear,
      useNativeDriver: true
    })]);
    let animation = Animated.loop(animSequence, {
      iterations: 2
    });
    animation.start(() => {
      callback === null || callback === void 0 ? void 0 : callback();
    });
  };

  return /*#__PURE__*/React.createElement(View, {
    style: [styles.container, style],
    pointerEvents: "none"
  }, /*#__PURE__*/React.createElement(Animated.View, {
    style: [styles.ripple, {
      width: rippleSize * 2,
      height: rippleSize * 2,
      borderRadius: rippleSize
    }, rippleStyle, {
      opacity: rippleOpacity,
      transform: [{
        scale: rippleScale
      }]
    }]
  }), /*#__PURE__*/React.createElement(View, {
    style: [styles.innerContainer, containerStyle]
  }, /*#__PURE__*/React.createElement(View, {
    style: {
      flex: 0.45
    }
  }), /*#__PURE__*/React.createElement(View, {
    style: {
      flex: 0.55
    }
  }, /*#__PURE__*/React.createElement(Animated.View, {
    style: [styles.flashContainer, {
      opacity: blinkViewOpacity
    }]
  }, children), /*#__PURE__*/React.createElement(Animated.Text, {
    style: [styles.text, {
      opacity: blinkViewOpacity
    }]
  }, tipText))));
});
export default RippleView;
const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center'
  },
  innerContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center'
  },
  ripple: {
    position: 'absolute',
    backgroundColor: 'rgba(250,250,250,0.3)'
  },
  flashContainer: {
    justifyContent: 'center',
    alignItems: 'center'
  },
  text: {
    fontSize: 14,
    fontWeight: '600',
    color: '#fafafa',
    margin: 6,
    textAlign: 'center'
  }
});
//# sourceMappingURL=RippleView.js.map