import React from 'react';
import { Animated, BackHandler, I18nManager, StyleSheet, View } from 'react-native';
import { IconLock, IconPaly, IconPause, IconRepeat, IconUnlock, IconZap } from '../assets/icons';
import { getAspectRatioTipText, getKeyByValue, getTimeTipText } from '../utils/StringUtil';
import FooterControl from './FooterControl';
import GestureView, { GestureEventType, MAX_BRIGHTNESS, MAX_VOLUME, TapEventType } from './GestureView';
import TipView from './TipView';
import MoreControl from './MoreControl';
import { DefaultTheme, DefaultSizesTheme, DefaultMiniSeekBarTheme, DefaultTagViewTheme } from '../utils/Theme';
import HeaderControl from './HeaderControl';
import LineSeekBar from './LineSeekBar';
import SpeedControl from './SpeedControl';
import PlayButton from './PlayButton';
import Loader from './Loader';
import { getAlphaColor } from '../utils/ColorUtil';
import { getBrightnessIcon, getVolumeIcon } from '../utils/ComponentUtil';
import PlaylistControl from './PlaylistControl';
import { Video } from 'expo-av';
import * as Brightness from 'expo-brightness';
import PosterView from './PosterView';
const ANIMATION_DURATION = 300;
const USE_NATIVE_DRIVER = false;
const FORWARD_OR_REWIND_DURATION = 10;
const RESIZE_MODES = ['BEST_FIT', 'FIT_TO_SCREEN', 'FILL_TO_SCREEN'];
const RESIZE_MODE_VALUES = ['contain', 'cover', 'stretch'];
const NexenPlayer = /*#__PURE__*/React.forwardRef((props, ref) => {
  var _nexenTheme$tagView, _nexenTheme$tagView2, _nexenTheme$colors, _nexenTheme$tagView3, _nexenTheme$colors2, _nexenTheme$tipView, _nexenTheme$tipView2, _nexenTheme$tipView3, _nexenTheme$colors3, _nexenTheme$tipView4, _nexenTheme$colors4, _nexenTheme$sizes, _nexenTheme$colors5, _nexenTheme$colors6;

  let {
    source: playerSource,
    config: playerConfig,
    playList: playerPlayList,
    style,
    insets,
    theme,
    onBackPress,
    onFullScreenModeUpdate,
    onPlay,
    onPause,
    onStop,
    onSkipNext,
    onSkipBack,
    onVolumeUpdate,
    onBrightnessUpdate,
    onMuteUpdate,
    onRepeatUpdate,
    onSpeedUpdate,
    onPlayListItemSelect,
    onScreenLockUpdate,
    onReload,
    onLoad,
    onError
  } = props;
  const [nexenSource, setNexenSource] = React.useState(playerSource);
  const [nexenConfig, setNexenConfig] = React.useState({
    loaderText: 'Loading...',
    errorText: 'Error...!',
    doubleTapTime: 300,
    controlTimeout: 5000,
    controlHideMode: 'touch',
    layoutMode: 'intermediate',
    posterResizeMode: 'cover',
    resizeMode: 'contain',
    volume: 80,
    brightness: 25,
    playbackSpeed: '1.0',
    muted: false,
    repeat: false,
    autoPlay: false,
    disableOnScreenPlayButton: false,
    disableBack: false,
    disableResizeMode: false,
    disableReload: false,
    disableMore: false,
    disableSkip: false,
    disableStop: false,
    disableVolume: false,
    disableFullscreen: false,
    disablePlayList: false,
    ...playerConfig
  });
  const [trackInfo, setTrackInfo] = React.useState({
    trackTime: 0,
    totalTrackTime: 0,
    cachedTrackTime: 0
  });
  const [playList, setPlayList] = React.useState(playerPlayList);
  const [dimension, setDimension] = React.useState({
    width: 0,
    height: 0
  });
  const [showControl, setShowControl] = React.useState(false);
  const [showSpeedControl, setShowSpeedControl] = React.useState(false);
  const [showPlaylistControl, setShowPlaylistControl] = React.useState(false);
  const [showMoreControl, setShowMoreControl] = React.useState(false);
  const [loading, setLoading] = React.useState(false);
  const [error, setError] = React.useState(false);
  const [locked, setLocked] = React.useState(false);
  const [fullScreen, setFullScreen] = React.useState(false);
  const [paused, setPaused] = React.useState(!(nexenConfig !== null && nexenConfig !== void 0 && nexenConfig.autoPlay));
  const [disablePlaylistAndSkip, setDisablePlaylistAndSkip] = React.useState(false);
  const durationTime = React.useRef(0);
  const cachedTime = React.useRef(0);
  const currentTime = React.useRef(0);
  const isSeeking = React.useRef(false);
  const isSliding = React.useRef(false);
  const isSeekable = React.useRef(false);
  const gestureEnabled = React.useRef(false);
  const isStopped = React.useRef(false);
  const isVolumeSeekable = React.useRef(true);
  const isFullscreen = React.useRef(fullScreen);
  const posterDisabled = React.useRef(false);
  const showPoster = React.useRef(true);
  const moreControlRef = React.useRef(null);
  const speedControlRef = React.useRef(null);
  const playlistControlRef = React.useRef(null);
  const videoRef = React.useRef(null);
  const tipViewRef = React.useRef(null);
  const headerControlRef = React.useRef(null);
  const footerControlRef = React.useRef(null);
  const headerOpacity = React.useRef(new Animated.Value(0)).current;
  const headerTopMargin = React.useRef(new Animated.Value(-60)).current;
  const footerOpacity = React.useRef(new Animated.Value(0)).current;
  const footerBottomMargin = React.useRef(new Animated.Value(-60)).current;
  const controlTimeoutRef = React.useRef(null);
  React.useImperativeHandle(ref, () => ({
    play: () => {
      setPaused(false);
    },
    pause: () => {
      setPaused(true);
    },
    stop: () => {
      handleStopPlayback();
    },
    skipNext: () => {
      _onSkipNext();
    },
    skipBack: () => {
      _onSkipBack();
    },
    reload: callback => {
      handleReloadVideo(() => {
        callback === null || callback === void 0 ? void 0 : callback();
        onReload === null || onReload === void 0 ? void 0 : onReload(nexenConfig ? nexenConfig.index : playList === null || playList === void 0 ? void 0 : playList.currentIndex);
      });
    },
    load: (index, callback) => {
      handleLoadVideo(index, () => {
        callback === null || callback === void 0 ? void 0 : callback();
      });
    },
    setFullScreenMode: fullScreen => {
      setFullScreen(fullScreen);
      onFullScreenModeUpdate === null || onFullScreenModeUpdate === void 0 ? void 0 : onFullScreenModeUpdate(fullScreen, nexenConfig !== null && nexenConfig !== void 0 && nexenConfig.optimize ? nexenConfig.index : playList === null || playList === void 0 ? void 0 : playList.currentIndex);
    }
  }));
  const nexenTheme = React.useMemo(() => {
    return { ...DefaultTheme,
      trackSeekBar: { ...DefaultTheme.trackSeekBar,
        ...(theme === null || theme === void 0 ? void 0 : theme.trackSeekBar)
      },
      speedSeekBar: { ...DefaultTheme.speedSeekBar,
        ...(theme === null || theme === void 0 ? void 0 : theme.speedSeekBar)
      },
      lineSeekBar: { ...DefaultTheme.lineSeekBar,
        ...(theme === null || theme === void 0 ? void 0 : theme.lineSeekBar)
      },
      miniSeekBar: { ...DefaultMiniSeekBarTheme,
        ...(theme === null || theme === void 0 ? void 0 : theme.miniSeekBar)
      },
      volumeSeekBar: { ...DefaultTheme.volumeSeekBar,
        ...(theme === null || theme === void 0 ? void 0 : theme.volumeSeekBar)
      },
      brightnessSeekBar: { ...DefaultTheme.brightnessSeekBar,
        ...(theme === null || theme === void 0 ? void 0 : theme.brightnessSeekBar)
      },
      lockButton: { ...DefaultTheme.lockButton,
        ...(theme === null || theme === void 0 ? void 0 : theme.lockButton)
      },
      tagView: { ...DefaultTagViewTheme,
        ...(theme === null || theme === void 0 ? void 0 : theme.tagView)
      },
      colors: { ...DefaultTheme.colors,
        ...(theme === null || theme === void 0 ? void 0 : theme.colors)
      },
      sizes: { ...DefaultSizesTheme,
        ...(theme === null || theme === void 0 ? void 0 : theme.sizes)
      },
      fonts: { ...(theme === null || theme === void 0 ? void 0 : theme.fonts)
      }
    };
  }, [theme]);
  const ICON_SIZE_FACTOR = 0.8;
  const TAG_VIEW_ICON_SIZE = nexenTheme === null || nexenTheme === void 0 ? void 0 : (_nexenTheme$tagView = nexenTheme.tagView) === null || _nexenTheme$tagView === void 0 ? void 0 : _nexenTheme$tagView.iconSize;
  const TAG_VIEW_ACTIVE_ICON_COLOR = (nexenTheme === null || nexenTheme === void 0 ? void 0 : (_nexenTheme$tagView2 = nexenTheme.tagView) === null || _nexenTheme$tagView2 === void 0 ? void 0 : _nexenTheme$tagView2.activeIconColor) || getAlphaColor(nexenTheme === null || nexenTheme === void 0 ? void 0 : (_nexenTheme$colors = nexenTheme.colors) === null || _nexenTheme$colors === void 0 ? void 0 : _nexenTheme$colors.accentColor, 0.7);
  const TAG_VIEW_INACTIVE_ICON_COLOR = (nexenTheme === null || nexenTheme === void 0 ? void 0 : (_nexenTheme$tagView3 = nexenTheme.tagView) === null || _nexenTheme$tagView3 === void 0 ? void 0 : _nexenTheme$tagView3.inactiveIconColor) || getAlphaColor(nexenTheme === null || nexenTheme === void 0 ? void 0 : (_nexenTheme$colors2 = nexenTheme.colors) === null || _nexenTheme$colors2 === void 0 ? void 0 : _nexenTheme$colors2.primaryColor, 0.5);
  const TIP_VIEW_ICON_SIZE = nexenTheme === null || nexenTheme === void 0 ? void 0 : (_nexenTheme$tipView = nexenTheme.tipView) === null || _nexenTheme$tipView === void 0 ? void 0 : _nexenTheme$tipView.iconSize;
  const TIP_VIEW_TEXT_SIZE = nexenTheme === null || nexenTheme === void 0 ? void 0 : (_nexenTheme$tipView2 = nexenTheme.tipView) === null || _nexenTheme$tipView2 === void 0 ? void 0 : _nexenTheme$tipView2.textSize;
  const TIP_VIEW_ICON_COLOR = ((_nexenTheme$tipView3 = nexenTheme.tipView) === null || _nexenTheme$tipView3 === void 0 ? void 0 : _nexenTheme$tipView3.iconColor) || ((_nexenTheme$colors3 = nexenTheme.colors) === null || _nexenTheme$colors3 === void 0 ? void 0 : _nexenTheme$colors3.secondaryIconColor);
  const TIP_VIEW_TEXT_COLOR = (nexenTheme === null || nexenTheme === void 0 ? void 0 : (_nexenTheme$tipView4 = nexenTheme.tipView) === null || _nexenTheme$tipView4 === void 0 ? void 0 : _nexenTheme$tipView4.textColor) || (nexenTheme === null || nexenTheme === void 0 ? void 0 : (_nexenTheme$colors4 = nexenTheme.colors) === null || _nexenTheme$colors4 === void 0 ? void 0 : _nexenTheme$colors4.secondaryTextColor);
  const CONTAINER_BORDER_RADIUS = nexenTheme === null || nexenTheme === void 0 ? void 0 : (_nexenTheme$sizes = nexenTheme.sizes) === null || _nexenTheme$sizes === void 0 ? void 0 : _nexenTheme$sizes.modalCornerRadius;
  const CONTAINER_BACKGROUND_COLOR = (nexenTheme === null || nexenTheme === void 0 ? void 0 : (_nexenTheme$colors5 = nexenTheme.colors) === null || _nexenTheme$colors5 === void 0 ? void 0 : _nexenTheme$colors5.modalBackgroundColor) || getAlphaColor(nexenTheme === null || nexenTheme === void 0 ? void 0 : (_nexenTheme$colors6 = nexenTheme.colors) === null || _nexenTheme$colors6 === void 0 ? void 0 : _nexenTheme$colors6.primaryColor, 0.7);
  const minValue = Math.min(Number(dimension.width), Number(dimension.height));
  const MORE_CONTROL_CONTAINER_WIDTH = fullScreen ? minValue * 0.55 + (insets === null || insets === void 0 ? void 0 : insets.right) : minValue * 0.7;
  const SPEED_CONTROL_CONTAINER_HEIGHT = fullScreen ? minValue * 0.2 + (insets === null || insets === void 0 ? void 0 : insets.bottom) : minValue * 0.3;
  const PLAYLIST_CONTROL_CONTAINER_HEIGHT = fullScreen ? minValue * 0.3 + (insets === null || insets === void 0 ? void 0 : insets.bottom) : minValue * 0.35;
  const LINE_SEEK_BAR_HEIGHT = 2;
  const rtlMultiplier = React.useRef(1);
  const isRTL = I18nManager.isRTL;
  rtlMultiplier.current = isRTL ? -1 : 1;
  const tipViewTheme = React.useMemo(() => {
    var _nexenTheme$fonts;

    return {
      textColor: TIP_VIEW_TEXT_COLOR,
      textSize: TIP_VIEW_TEXT_SIZE,
      font: nexenTheme === null || nexenTheme === void 0 ? void 0 : (_nexenTheme$fonts = nexenTheme.fonts) === null || _nexenTheme$fonts === void 0 ? void 0 : _nexenTheme$fonts.secondaryFont
    };
  }, [nexenTheme]);
  const loaderTheme = React.useMemo(() => {
    var _nexenTheme$fonts2;

    return {
      iconSize: 40,
      iconColor: TIP_VIEW_ICON_COLOR,
      textColor: TIP_VIEW_TEXT_COLOR,
      textSize: 16,
      font: nexenTheme === null || nexenTheme === void 0 ? void 0 : (_nexenTheme$fonts2 = nexenTheme.fonts) === null || _nexenTheme$fonts2 === void 0 ? void 0 : _nexenTheme$fonts2.secondaryFont
    };
  }, [nexenTheme]);
  const lineSeekBarTheme = React.useMemo(() => {
    var _nexenTheme$lineSeekB, _nexenTheme$colors7, _nexenTheme$lineSeekB2, _nexenTheme$colors8;

    return {
      lineHeight: LINE_SEEK_BAR_HEIGHT,
      lineColor: (nexenTheme === null || nexenTheme === void 0 ? void 0 : (_nexenTheme$lineSeekB = nexenTheme.lineSeekBar) === null || _nexenTheme$lineSeekB === void 0 ? void 0 : _nexenTheme$lineSeekB.lineColor) || (nexenTheme === null || nexenTheme === void 0 ? void 0 : (_nexenTheme$colors7 = nexenTheme.colors) === null || _nexenTheme$colors7 === void 0 ? void 0 : _nexenTheme$colors7.accentColor),
      lineUnderlayColor: (nexenTheme === null || nexenTheme === void 0 ? void 0 : (_nexenTheme$lineSeekB2 = nexenTheme.lineSeekBar) === null || _nexenTheme$lineSeekB2 === void 0 ? void 0 : _nexenTheme$lineSeekB2.lineUnderlayColor) || getAlphaColor(nexenTheme === null || nexenTheme === void 0 ? void 0 : (_nexenTheme$colors8 = nexenTheme.colors) === null || _nexenTheme$colors8 === void 0 ? void 0 : _nexenTheme$colors8.secondaryColor, 0.3)
    };
  }, [nexenTheme]);

  const _onLayoutChange = async e => {
    const {
      width,
      height
    } = e.nativeEvent.layout;
    const {
      width: w,
      height: h
    } = dimension;

    if (w !== width || h !== height) {
      setDimension({
        width,
        height
      }); // console.log(`onLayoutChange:: width: ${width} height: ${height}`);
    }
  };

  const _onTapDetected = React.useCallback(async (event, value) => {
    switch (event) {
      case TapEventType.SINGLE_TAP:
        if (showMoreControl) {
          hideMoreOptions();
          gestureEnabled.current = true;
          break;
        }

        if (showSpeedControl) {
          hidePlaybackSpeedControl();
          gestureEnabled.current = true;
          break;
        }

        if (showPlaylistControl) {
          hideVideoListControl();
          gestureEnabled.current = true;
          break;
        }

        if (showControl) {
          hideMainControl();
        } else {
          showMainControl();
        }

        break;

      case TapEventType.DOUBLE_TAP_LEFT:
      case TapEventType.DOUBLE_TAP_RIGHT:
        if (value) {
          var _videoRef$current;

          await ((_videoRef$current = videoRef.current) === null || _videoRef$current === void 0 ? void 0 : _videoRef$current.setStatusAsync({
            positionMillis: value * 1000
          }));
          setTrackInfo(prevState => {
            return { ...prevState,
              trackTime: value
            };
          });
        }

        break;

      case TapEventType.DOUBLE_TAP_MIDDLE:
        handleDoubleTapPlayPause();
        break;
    }
  }, [showControl, showMoreControl, showSpeedControl, showPlaylistControl, paused]);

  const _onGestureMove = React.useCallback((event, value) => {
    var _headerControlRef$cur, _videoRef$current2, _headerControlRef$cur2;

    switch (event) {
      case GestureEventType.VOLUME:
        (_headerControlRef$cur = headerControlRef.current) === null || _headerControlRef$cur === void 0 ? void 0 : _headerControlRef$cur.updateIconTagView({
          volumeIcon: getVolumeIcon(value, MAX_VOLUME, TAG_VIEW_ICON_SIZE, TIP_VIEW_ICON_COLOR)
        });
        (_videoRef$current2 = videoRef.current) === null || _videoRef$current2 === void 0 ? void 0 : _videoRef$current2.setStatusAsync({
          volume: value / 100
        });
        onVolumeUpdate === null || onVolumeUpdate === void 0 ? void 0 : onVolumeUpdate(value);
        break;

      case GestureEventType.BRIGHTNESS:
        (_headerControlRef$cur2 = headerControlRef.current) === null || _headerControlRef$cur2 === void 0 ? void 0 : _headerControlRef$cur2.updateIconTagView({
          brightnessIcon: getBrightnessIcon(value, MAX_BRIGHTNESS, TAG_VIEW_ICON_SIZE, TIP_VIEW_ICON_COLOR)
        });
        Brightness.setBrightnessAsync(value / 100);
        onBrightnessUpdate === null || onBrightnessUpdate === void 0 ? void 0 : onBrightnessUpdate(value);
        break;
    }
  }, []);

  const _onGestureEnd = React.useCallback(async (event, value) => {
    var _videoRef$current3, _headerControlRef$cur3, _videoRef$current4, _headerControlRef$cur4;

    switch (event) {
      case GestureEventType.TRACK:
        (_videoRef$current3 = videoRef.current) === null || _videoRef$current3 === void 0 ? void 0 : _videoRef$current3.setStatusAsync({
          positionMillis: value * 1000
        });
        setTrackInfo(prevState => {
          return { ...prevState,
            trackTime: value
          };
        });
        break;

      case GestureEventType.VOLUME:
        (_headerControlRef$cur3 = headerControlRef.current) === null || _headerControlRef$cur3 === void 0 ? void 0 : _headerControlRef$cur3.updateIconTagView({
          volumeIcon: getVolumeIcon(value, MAX_VOLUME, TAG_VIEW_ICON_SIZE, TIP_VIEW_ICON_COLOR)
        });
        (_videoRef$current4 = videoRef.current) === null || _videoRef$current4 === void 0 ? void 0 : _videoRef$current4.setStatusAsync({
          volume: value / 100
        });
        setNexenConfig(prevState => {
          return { ...prevState,
            volume: value
          };
        });
        onVolumeUpdate === null || onVolumeUpdate === void 0 ? void 0 : onVolumeUpdate(value);
        break;

      case GestureEventType.BRIGHTNESS:
        (_headerControlRef$cur4 = headerControlRef.current) === null || _headerControlRef$cur4 === void 0 ? void 0 : _headerControlRef$cur4.updateIconTagView({
          brightnessIcon: getBrightnessIcon(value, MAX_BRIGHTNESS, TAG_VIEW_ICON_SIZE, TIP_VIEW_ICON_COLOR)
        });
        Brightness.setBrightnessAsync(value / 100);
        setNexenConfig(prevState => {
          return { ...prevState,
            brightness: value
          };
        });
        onBrightnessUpdate === null || onBrightnessUpdate === void 0 ? void 0 : onBrightnessUpdate(value);
        break;
    }
  }, []);

  const showMainControl = () => {
    setShowControl(true);
  };

  const hideMainControl = () => {
    startControlHideAnimation(() => {
      setShowControl(false);
    });
  };

  const setControlTimeout = () => {
    controlTimeoutRef.current = setTimeout(() => {
      hideMainControl();
    }, nexenConfig === null || nexenConfig === void 0 ? void 0 : nexenConfig.controlTimeout);
  };

  const clearControlTimeout = () => {
    if (controlTimeoutRef.current) {
      clearTimeout(controlTimeoutRef.current);
    }
  };

  const resetControlTimeout = () => {
    clearControlTimeout();
    setControlTimeout();
  };

  const showMoreOptions = () => {
    setShowMoreControl(true);
  };

  const hideMoreOptions = () => {
    var _moreControlRef$curre;

    (_moreControlRef$curre = moreControlRef.current) === null || _moreControlRef$curre === void 0 ? void 0 : _moreControlRef$curre.hide(() => {
      setShowMoreControl(false);
    });
  };

  const showPlaybackSpeedControl = () => {
    setShowSpeedControl(true);
  };

  const hidePlaybackSpeedControl = () => {
    var _speedControlRef$curr;

    (_speedControlRef$curr = speedControlRef.current) === null || _speedControlRef$curr === void 0 ? void 0 : _speedControlRef$curr.hide(() => {
      setShowSpeedControl(false);
    });
  };

  const showVideoListControl = () => {
    setShowPlaylistControl(true);
  };

  const hideVideoListControl = () => {
    var _playlistControlRef$c;

    (_playlistControlRef$c = playlistControlRef.current) === null || _playlistControlRef$c === void 0 ? void 0 : _playlistControlRef$c.hide(() => {
      setShowPlaylistControl(false);
    });
  };

  const startControlShowAnimation = callback => {
    Animated.parallel([Animated.timing(headerOpacity, {
      toValue: 1,
      duration: ANIMATION_DURATION,
      useNativeDriver: USE_NATIVE_DRIVER
    }), Animated.timing(headerTopMargin, {
      toValue: 0,
      duration: ANIMATION_DURATION,
      useNativeDriver: USE_NATIVE_DRIVER
    }), Animated.timing(footerOpacity, {
      toValue: 1,
      duration: ANIMATION_DURATION,
      useNativeDriver: USE_NATIVE_DRIVER
    }), Animated.timing(footerBottomMargin, {
      toValue: 0,
      duration: ANIMATION_DURATION,
      useNativeDriver: USE_NATIVE_DRIVER
    })]).start(callback);
  };

  const startControlHideAnimation = callback => {
    Animated.parallel([Animated.timing(headerOpacity, {
      toValue: 0,
      duration: ANIMATION_DURATION,
      useNativeDriver: USE_NATIVE_DRIVER
    }), Animated.timing(headerTopMargin, {
      toValue: -60,
      duration: ANIMATION_DURATION,
      useNativeDriver: USE_NATIVE_DRIVER
    }), Animated.timing(footerOpacity, {
      toValue: 0,
      duration: ANIMATION_DURATION,
      useNativeDriver: USE_NATIVE_DRIVER
    }), Animated.timing(footerBottomMargin, {
      toValue: -60,
      duration: ANIMATION_DURATION,
      useNativeDriver: USE_NATIVE_DRIVER
    })]).start(callback);
  };

  React.useEffect(() => {
    if (paused) {
      onPause === null || onPause === void 0 ? void 0 : onPause(nexenConfig !== null && nexenConfig !== void 0 && nexenConfig.optimize ? nexenConfig.index : playList === null || playList === void 0 ? void 0 : playList.currentIndex);
    } else {
      onPlay === null || onPlay === void 0 ? void 0 : onPlay(nexenConfig !== null && nexenConfig !== void 0 && nexenConfig.optimize ? nexenConfig.index : playList === null || playList === void 0 ? void 0 : playList.currentIndex);
    }
  }, [paused]);
  React.useEffect(() => {
    isFullscreen.current = fullScreen;

    if (showControl) {
      startControlShowAnimation();

      if ((nexenConfig === null || nexenConfig === void 0 ? void 0 : nexenConfig.controlHideMode) == 'auto') {
        setControlTimeout();
      }
    } else {
      if ((nexenConfig === null || nexenConfig === void 0 ? void 0 : nexenConfig.controlHideMode) == 'auto') {
        clearControlTimeout();
      }
    }

    if ((nexenConfig === null || nexenConfig === void 0 ? void 0 : nexenConfig.layoutMode) === 'advanced') {
      var _headerControlRef$cur5;

      (_headerControlRef$cur5 = headerControlRef.current) === null || _headerControlRef$cur5 === void 0 ? void 0 : _headerControlRef$cur5.updateIconTagView({
        volumeIcon: getVolumeIcon(nexenConfig === null || nexenConfig === void 0 ? void 0 : nexenConfig.volume, MAX_VOLUME, TAG_VIEW_ICON_SIZE, TIP_VIEW_ICON_COLOR),
        brightnessIcon: getBrightnessIcon(nexenConfig === null || nexenConfig === void 0 ? void 0 : nexenConfig.brightness, MAX_BRIGHTNESS, TAG_VIEW_ICON_SIZE, TIP_VIEW_ICON_COLOR),
        repeatIcon: nexenConfig !== null && nexenConfig !== void 0 && nexenConfig.repeat ? /*#__PURE__*/React.createElement(IconRepeat, {
          size: TAG_VIEW_ICON_SIZE,
          color: TAG_VIEW_ACTIVE_ICON_COLOR
        }) : /*#__PURE__*/React.createElement(IconRepeat, {
          size: TAG_VIEW_ICON_SIZE,
          color: TAG_VIEW_INACTIVE_ICON_COLOR
        }),
        speedIcon: (nexenConfig === null || nexenConfig === void 0 ? void 0 : nexenConfig.playbackSpeed) !== '1.0' ? /*#__PURE__*/React.createElement(IconZap, {
          size: TAG_VIEW_ICON_SIZE,
          color: TAG_VIEW_ACTIVE_ICON_COLOR
        }) : /*#__PURE__*/React.createElement(IconZap, {
          size: TAG_VIEW_ICON_SIZE,
          color: TAG_VIEW_INACTIVE_ICON_COLOR
        })
      });
    }
  }, [showControl, fullScreen, locked, nexenConfig]);
  React.useEffect(() => {
    if (showMoreControl) {
      var _moreControlRef$curre2;

      (_moreControlRef$curre2 = moreControlRef.current) === null || _moreControlRef$curre2 === void 0 ? void 0 : _moreControlRef$curre2.show();
      return;
    }

    if (showSpeedControl) {
      var _speedControlRef$curr2;

      (_speedControlRef$curr2 = speedControlRef.current) === null || _speedControlRef$curr2 === void 0 ? void 0 : _speedControlRef$curr2.show();
      return;
    }

    if (showPlaylistControl) {
      var _playlistControlRef$c2;

      (_playlistControlRef$c2 = playlistControlRef.current) === null || _playlistControlRef$c2 === void 0 ? void 0 : _playlistControlRef$c2.show();
      return;
    }
  }, [showMoreControl, showSpeedControl, showPlaylistControl]);
  React.useEffect(() => {
    currentTime.current = trackInfo.trackTime;
    cachedTime.current = trackInfo.cachedTrackTime;
    durationTime.current = trackInfo.totalTrackTime;
  }, [trackInfo]);
  React.useEffect(() => {
    const currentIndex = RESIZE_MODE_VALUES.indexOf(nexenConfig === null || nexenConfig === void 0 ? void 0 : nexenConfig.resizeMode);

    if (isSeekable.current) {
      var _tipViewRef$current;

      (_tipViewRef$current = tipViewRef.current) === null || _tipViewRef$current === void 0 ? void 0 : _tipViewRef$current.updateState({
        showTip: true,
        tipText: getAspectRatioTipText(RESIZE_MODES[currentIndex]),
        autoHide: true
      });
    }
  }, [nexenConfig === null || nexenConfig === void 0 ? void 0 : nexenConfig.resizeMode]); // React.useEffect(() => {
  //   if (playerSource.poster) {
  //     setShowPoster(true);
  //   } else {
  //     setShowPoster(false);
  //   }
  // }, [playerSource.poster]);

  React.useEffect(() => {
    const newConfig = { ...nexenConfig,
      ...playerConfig
    };
    Brightness.setBrightnessAsync(newConfig.brightness / 100);
    setNexenConfig(newConfig);

    if (newConfig !== null && newConfig !== void 0 && newConfig.optimize) {
      if ((newConfig === null || newConfig === void 0 ? void 0 : newConfig.index) != (newConfig === null || newConfig === void 0 ? void 0 : newConfig.activeIndex)) {
        showPoster.current = true;
        setPaused(true);
        hideMainControl();
      } else {
        setPlayList(prevState => {
          return { ...prevState,
            currentIndex: newConfig === null || newConfig === void 0 ? void 0 : newConfig.activeIndex
          };
        });
      }
    }
  }, [playerConfig]);
  React.useEffect(() => {
    const newSource = { ...nexenSource,
      ...playerSource
    };

    if (newSource.poster) {
      showPoster.current = true;
    } else {
      showPoster.current = false;
    }

    setNexenSource(newSource);
  }, [playerSource]);
  React.useEffect(() => {
    if (!playerPlayList || !playerPlayList.items || playerPlayList.items.length === 0) {
      setDisablePlaylistAndSkip(true);
    } else {
      setDisablePlaylistAndSkip(false);
    }

    setPlayList(playerPlayList); // setPlayList((prevState) => {
    //   return {
    //     ...prevState,
    //     ...playerPlayList,
    //   };
    // });
  }, [playerPlayList]); // React.useEffect(() => {
  //   if (optimizationConfig?.optimize) {
  //     if (optimizationConfig?.index != optimizationConfig?.activeIndex) {
  //       setShowPoster(true);
  //       setPaused(true);
  //       hideMainControl();
  //     } else {
  //       // setPlaylistIndex(optimizationConfig?.activeIndex!);
  //       playlistIndex.current = optimizationConfig?.activeIndex!;
  //     }
  //   }
  // }, [optimizationConfig]);

  React.useEffect(() => {
    const backHandler = BackHandler.addEventListener('hardwareBackPress', _onBackPress);
    return () => {
      if (backHandler) {
        backHandler.remove();
      }

      if (controlTimeoutRef.current) {
        clearTimeout(controlTimeoutRef.current);
      }
    };
  }, []);

  const _onBackPress = React.useCallback(() => {
    if (isFullscreen.current) {
      setFullScreen(false);
      onFullScreenModeUpdate === null || onFullScreenModeUpdate === void 0 ? void 0 : onFullScreenModeUpdate(false, nexenConfig !== null && nexenConfig !== void 0 && nexenConfig.optimize ? nexenConfig.index : playList === null || playList === void 0 ? void 0 : playList.currentIndex);
    } else {
      onBackPress === null || onBackPress === void 0 ? void 0 : onBackPress();
    }

    return true;
  }, []);

  const _onAspectRatioPress = React.useCallback(() => {
    handleResizeMode(nexenConfig === null || nexenConfig === void 0 ? void 0 : nexenConfig.resizeMode);
  }, [nexenConfig === null || nexenConfig === void 0 ? void 0 : nexenConfig.resizeMode]);

  const _onMorePress = React.useCallback(() => {
    showMoreOptions();
    hideMainControl();
    gestureEnabled.current = false;
  }, []);

  const _onMoreItemPress = React.useCallback(item => {
    switch (item.id) {
      case 'lock':
        hideMoreOptions();
        handleLockScreen();
        isSeekable.current = false;
        gestureEnabled.current = false;
        break;

      case 'speed':
        hideMoreOptions();
        showPlaybackSpeedControl();
        gestureEnabled.current = false;
        break;

      case 'repeat':
        hideMoreOptions();
        handleRepeatVideo(!(nexenConfig !== null && nexenConfig !== void 0 && nexenConfig.repeat));
        gestureEnabled.current = true;
        break;

      case 'reload':
        hideMoreOptions();
        handleReloadVideo();
        gestureEnabled.current = true;
        break;

      case 'playlist':
        hideMoreOptions();
        showVideoListControl();
        gestureEnabled.current = false;
        break;
    }
  }, [paused, nexenConfig]);

  const _onSpeedUpdate = React.useCallback(value => {
    var _tipViewRef$current2;

    // const newSpeed = Number(value);
    const newSpeed = value;
    (_tipViewRef$current2 = tipViewRef.current) === null || _tipViewRef$current2 === void 0 ? void 0 : _tipViewRef$current2.updateState({
      showTip: true,
      tipText: `${newSpeed}x Speed`,
      autoHide: true,
      withIcon: true,
      icon: /*#__PURE__*/React.createElement(IconZap, {
        size: TIP_VIEW_ICON_SIZE,
        color: TIP_VIEW_ICON_COLOR
      })
    });
    setNexenConfig(prevState => {
      return { ...prevState,
        playbackSpeed: newSpeed
      };
    });
    onSpeedUpdate === null || onSpeedUpdate === void 0 ? void 0 : onSpeedUpdate(newSpeed);
  }, []);

  const handleDoubleTapPlayPause = () => {
    if (paused) {
      var _tipViewRef$current3;

      setPaused(false);
      (_tipViewRef$current3 = tipViewRef.current) === null || _tipViewRef$current3 === void 0 ? void 0 : _tipViewRef$current3.updateState({
        showTip: true,
        tipText: 'Playing',
        autoHide: true,
        withIcon: true,
        icon: /*#__PURE__*/React.createElement(IconPaly, {
          size: TIP_VIEW_ICON_SIZE,
          color: TIP_VIEW_ICON_COLOR
        })
      });
    } else {
      var _tipViewRef$current4;

      setPaused(true);
      (_tipViewRef$current4 = tipViewRef.current) === null || _tipViewRef$current4 === void 0 ? void 0 : _tipViewRef$current4.updateState({
        showTip: true,
        tipText: 'Paused',
        autoHide: true,
        withIcon: true,
        icon: /*#__PURE__*/React.createElement(IconPause, {
          size: TIP_VIEW_ICON_SIZE,
          color: TIP_VIEW_ICON_COLOR
        })
      });
    }
  };
  /* FooterControl Callback */


  const _onPlayButtonPress = () => {
    setPaused(false);
  };

  const _onStopPress = () => {
    handleStopPlayback();
  };

  const _onReloadPress = () => {
    handleReloadVideo();
  };

  const handleStopPlayback = () => {
    var _videoRef$current5;

    isStopped.current = true;
    (_videoRef$current5 = videoRef.current) === null || _videoRef$current5 === void 0 ? void 0 : _videoRef$current5.setStatusAsync({
      positionMillis: 0
    });
    setPaused(true);
    onStop === null || onStop === void 0 ? void 0 : onStop(nexenConfig !== null && nexenConfig !== void 0 && nexenConfig.optimize ? nexenConfig.index : playList === null || playList === void 0 ? void 0 : playList.currentIndex);
  };

  const handleRepeatVideo = repeat => {
    var _tipViewRef$current5;

    (_tipViewRef$current5 = tipViewRef.current) === null || _tipViewRef$current5 === void 0 ? void 0 : _tipViewRef$current5.updateState({
      showTip: true,
      tipText: repeat ? 'Repeat On' : 'Repeat Off',
      autoHide: true,
      withIcon: true,
      icon: /*#__PURE__*/React.createElement(IconRepeat, {
        size: TIP_VIEW_ICON_SIZE,
        color: TIP_VIEW_ICON_COLOR
      })
    });
    setNexenConfig(prevState => {
      return { ...prevState,
        repeat: repeat
      };
    });
    onRepeatUpdate === null || onRepeatUpdate === void 0 ? void 0 : onRepeatUpdate(repeat); // setLoop((prevState) => !prevState);
  };

  const handleReloadVideo = callback => {
    handleUnloadVideo(() => {
      var _videoRef$current6;

      (_videoRef$current6 = videoRef.current) === null || _videoRef$current6 === void 0 ? void 0 : _videoRef$current6.loadAsync(playList !== null && playList !== void 0 && playList.items ? (playList === null || playList === void 0 ? void 0 : playList.items.length) !== 0 ? playList === null || playList === void 0 ? void 0 : playList.items[playList === null || playList === void 0 ? void 0 : playList.currentIndex].itemSource : nexenSource.source : nexenSource.source).then(() => {
        callback === null || callback === void 0 ? void 0 : callback();
      });
    });
  };

  const handleUnloadVideo = callback => {
    var _videoRef$current7;

    (_videoRef$current7 = videoRef.current) === null || _videoRef$current7 === void 0 ? void 0 : _videoRef$current7.unloadAsync().then(() => {
      setTrackInfo({
        trackTime: 0,
        totalTrackTime: 0,
        cachedTrackTime: 0
      });
      callback === null || callback === void 0 ? void 0 : callback();
    });
  };

  const handleLoadVideo = (index, callback) => {
    handleUnloadVideo(() => {
      setPlayList(prevState => {
        return { ...prevState,
          currentIndex: index
        };
      });
      callback === null || callback === void 0 ? void 0 : callback();
    });
  };

  const handleLoadPlayListVideo = (index, callback) => {
    var _videoRef$current8;

    (_videoRef$current8 = videoRef.current) === null || _videoRef$current8 === void 0 ? void 0 : _videoRef$current8.unloadAsync().then(() => {
      setTrackInfo({
        trackTime: 0,
        totalTrackTime: 0,
        cachedTrackTime: 0
      });
      setPlayList(prevState => {
        return { ...prevState,
          currentIndex: index
        };
      });
      callback === null || callback === void 0 ? void 0 : callback();
    });
  };

  const handleLockScreen = () => {
    var _tipViewRef$current6;

    (_tipViewRef$current6 = tipViewRef.current) === null || _tipViewRef$current6 === void 0 ? void 0 : _tipViewRef$current6.updateState({
      showTip: true,
      tipText: 'Locked',
      autoHide: true,
      withIcon: true,
      icon: /*#__PURE__*/React.createElement(IconLock, {
        size: TIP_VIEW_ICON_SIZE,
        color: TIP_VIEW_ICON_COLOR
      })
    });
    setLocked(true);
    onScreenLockUpdate === null || onScreenLockUpdate === void 0 ? void 0 : onScreenLockUpdate(true);
  };

  const handleResizeMode = resizeMode => {
    const currentIndex = RESIZE_MODE_VALUES.indexOf(resizeMode);

    if (currentIndex < RESIZE_MODE_VALUES.length - 1) {
      setNexenConfig(prevState => {
        return { ...prevState,
          resizeMode: RESIZE_MODE_VALUES[currentIndex + 1]
        };
      });
    } else {
      setNexenConfig(prevState => {
        return { ...prevState,
          resizeMode: RESIZE_MODE_VALUES[0]
        };
      });
    }
  };

  const _onRewind = () => {
    var _videoRef$current9;

    const time = trackInfo.trackTime - FORWARD_OR_REWIND_DURATION;
    (_videoRef$current9 = videoRef.current) === null || _videoRef$current9 === void 0 ? void 0 : _videoRef$current9.setStatusAsync({
      positionMillis: time * 1000
    });
    setTrackInfo(prevState => {
      return { ...prevState,
        trackTime: time
      };
    });
  };

  const _onFastForward = () => {
    var _videoRef$current10;

    const time = trackInfo.trackTime + FORWARD_OR_REWIND_DURATION;
    (_videoRef$current10 = videoRef.current) === null || _videoRef$current10 === void 0 ? void 0 : _videoRef$current10.setStatusAsync({
      positionMillis: time * 1000
    });
    setTrackInfo(prevState => {
      return { ...prevState,
        trackTime: time
      };
    });
  };

  const _onSkipNext = () => {
    if (playList) {
      var _playList$items;

      if (playList.currentIndex >= 0 && playList.currentIndex < ((_playList$items = playList.items) === null || _playList$items === void 0 ? void 0 : _playList$items.length) - 1) {
        const index = (playList === null || playList === void 0 ? void 0 : playList.currentIndex) + 1;
        handleLoadPlayListVideo(index, () => {
          onSkipNext === null || onSkipNext === void 0 ? void 0 : onSkipNext(index);
        });
      }
    }
  };

  const _onSkipBack = () => {
    if (playList) {
      var _playList$items2;

      if (playList.currentIndex >= 0 && playList.currentIndex < ((_playList$items2 = playList.items) === null || _playList$items2 === void 0 ? void 0 : _playList$items2.length) - 1) {
        const index = playList.currentIndex - 1;
        handleLoadPlayListVideo(index, () => {
          onSkipBack === null || onSkipBack === void 0 ? void 0 : onSkipBack(index);
        });
      }
    }
  };

  const _onPlaylistItemPress = index => {
    if (playList) {
      if (playList.currentIndex !== index) {
        handleLoadPlayListVideo(index, () => {
          onPlayListItemSelect === null || onPlayListItemSelect === void 0 ? void 0 : onPlayListItemSelect(index);
        });
      }
    }
  };

  const _onTogglePlayPause = () => {
    setPaused(prevState => !prevState);
  };

  const _onToggleFullScreen = () => {
    onFullScreenModeUpdate === null || onFullScreenModeUpdate === void 0 ? void 0 : onFullScreenModeUpdate(!fullScreen, nexenConfig !== null && nexenConfig !== void 0 && nexenConfig.optimize ? nexenConfig.index : playList === null || playList === void 0 ? void 0 : playList.currentIndex);
    setFullScreen(prevState => !prevState);
  };

  const _onToggleVolume = () => {
    handleMuteVideo(!(nexenConfig !== null && nexenConfig !== void 0 && nexenConfig.muted));
  };

  const handleMuteVideo = mute => {
    var _tipViewRef$current7;

    (_tipViewRef$current7 = tipViewRef.current) === null || _tipViewRef$current7 === void 0 ? void 0 : _tipViewRef$current7.updateState({
      showTip: true,
      tipText: mute ? 'Sound Off' : 'Sound On',
      autoHide: true
    });
    isVolumeSeekable.current = !mute;
    setNexenConfig(prevState => {
      return { ...prevState,
        muted: mute
      };
    });
    onMuteUpdate === null || onMuteUpdate === void 0 ? void 0 : onMuteUpdate(mute);
  };
  /* Slide Button Callback */


  const _onSlideStart = React.useCallback(() => {
    isSliding.current = true;
  }, []);

  const _onSlideEnd = React.useCallback(() => {
    isSliding.current = false;
  }, []);

  const _onReachedToStart = React.useCallback(() => {}, []);

  const _onReachedToEnd = React.useCallback(() => {
    var _tipViewRef$current8;

    setLocked(false);
    isSeekable.current = true;
    gestureEnabled.current = true;
    (_tipViewRef$current8 = tipViewRef.current) === null || _tipViewRef$current8 === void 0 ? void 0 : _tipViewRef$current8.updateState({
      showTip: true,
      tipText: 'Unlocked',
      autoHide: true,
      withIcon: true,
      icon: /*#__PURE__*/React.createElement(IconUnlock, {
        size: TIP_VIEW_ICON_SIZE,
        color: TIP_VIEW_ICON_COLOR
      })
    });
    onScreenLockUpdate === null || onScreenLockUpdate === void 0 ? void 0 : onScreenLockUpdate(false);
  }, []);
  /* SeekBar Callback */


  const _onSeekStart = React.useCallback((value, totalValue) => {
    var _tipViewRef$current9;

    isSeeking.current = true;
    (_tipViewRef$current9 = tipViewRef.current) === null || _tipViewRef$current9 === void 0 ? void 0 : _tipViewRef$current9.updateState({
      showTip: true,
      tipText: getTimeTipText(value, totalValue),
      autoHide: false
    });
  }, []);

  const _onSeekUpdate = React.useCallback((value, totalValue) => {
    if (isSeeking.current) {
      var _tipViewRef$current10;

      (_tipViewRef$current10 = tipViewRef.current) === null || _tipViewRef$current10 === void 0 ? void 0 : _tipViewRef$current10.updateState({
        tipText: getTimeTipText(value, totalValue)
      });
    }
  }, []);

  const _onSeekEnd = React.useCallback(value => {
    var _videoRef$current11, _tipViewRef$current11;

    isSeeking.current = false;
    (_videoRef$current11 = videoRef.current) === null || _videoRef$current11 === void 0 ? void 0 : _videoRef$current11.setStatusAsync({
      positionMillis: value * 1000
    });
    setTrackInfo(prevState => {
      return { ...prevState,
        trackTime: value
      };
    });
    (_tipViewRef$current11 = tipViewRef.current) === null || _tipViewRef$current11 === void 0 ? void 0 : _tipViewRef$current11.updateState({
      showTip: false,
      autoHide: true
    });
  }, []);
  /* Volume SeekBar Callback */


  const _onVolumeSeekStart = React.useCallback(async (value, totalValue) => {
    var _tipViewRef$current12, _videoRef$current12;

    (_tipViewRef$current12 = tipViewRef.current) === null || _tipViewRef$current12 === void 0 ? void 0 : _tipViewRef$current12.updateState({
      showTip: true,
      tipText: `Volume : ${value}%`,
      autoHide: false
    });
    (_videoRef$current12 = videoRef.current) === null || _videoRef$current12 === void 0 ? void 0 : _videoRef$current12.setStatusAsync({
      volume: value / 100
    });
    onVolumeUpdate === null || onVolumeUpdate === void 0 ? void 0 : onVolumeUpdate(value);
  }, []);

  const _onVolumeSeekUpdate = React.useCallback(async (value, totalValue) => {
    var _tipViewRef$current13, _videoRef$current13;

    (_tipViewRef$current13 = tipViewRef.current) === null || _tipViewRef$current13 === void 0 ? void 0 : _tipViewRef$current13.updateState({
      showTip: true,
      tipText: `Volume : ${value}%`,
      autoHide: false
    });
    (_videoRef$current13 = videoRef.current) === null || _videoRef$current13 === void 0 ? void 0 : _videoRef$current13.setStatusAsync({
      volume: value / 100
    });
    onVolumeUpdate === null || onVolumeUpdate === void 0 ? void 0 : onVolumeUpdate(value);
  }, []);

  const _onVolumeSeekEnd = React.useCallback(async value => {
    var _tipViewRef$current14;

    setNexenConfig(prevState => {
      return { ...prevState,
        volume: value
      };
    });
    (_tipViewRef$current14 = tipViewRef.current) === null || _tipViewRef$current14 === void 0 ? void 0 : _tipViewRef$current14.updateState({
      showTip: false,
      autoHide: true
    });
    onVolumeUpdate === null || onVolumeUpdate === void 0 ? void 0 : onVolumeUpdate(value);
  }, []);
  /* VLCPlayer Callback */


  const _onLoadStart = React.useCallback(() => {
    setLoading(true); // setShowPoster(true);

    showPoster.current = true;
  }, []);

  const _onLoad = React.useCallback(status => {
    console.log(`_onLoad: ${JSON.stringify(status)}`);
    setLoading(false);
    setError(!status.isLoaded);

    if (status.isLoaded) {
      onLoad === null || onLoad === void 0 ? void 0 : onLoad(nexenConfig !== null && nexenConfig !== void 0 && nexenConfig.optimize ? nexenConfig.index : playList === null || playList === void 0 ? void 0 : playList.currentIndex);
      setTrackInfo(prevState => {
        return { ...prevState,
          totalTrackTime: status.durationMillis / 1000
        };
      });

      if (nexenConfig !== null && nexenConfig !== void 0 && nexenConfig.autoPlay) {
        setPaused(false);
      }
    }

    isSeekable.current = status.isLoaded;
    gestureEnabled.current = status.isLoaded;
    isStopped.current = false;
  }, []);

  const _onPlaybackStatusUpdate = React.useCallback(status => {
    if (status.isLoaded) {
      if (status.positionMillis != 0 && showPoster) {
        // setShowPoster(false);
        showPoster.current = false;
      }

      if (!isSeeking.current) {
        setTrackInfo({
          trackTime: status.positionMillis / 1000,
          cachedTrackTime: status.playableDurationMillis / 1000,
          totalTrackTime: status.durationMillis / 1000
        });
      }

      if (!status.isLooping && status.didJustFinish) {
        if (playList) {
          var _playList$items3;

          if (playList.currentIndex < ((_playList$items3 = playList.items) === null || _playList$items3 === void 0 ? void 0 : _playList$items3.length) - 1) {
            _onSkipNext();
          } else {
            handleStopPlayback();
          }
        } else {
          handleStopPlayback();
        }
      }
    }
  }, [showPoster]);

  const _onError = React.useCallback(error => {
    setError(true);
    onError === null || onError === void 0 ? void 0 : onError(error);
  }, []);

  const newSource = playList !== null && playList !== void 0 && playList.items ? (playList === null || playList === void 0 ? void 0 : playList.items.length) !== 0 ? playList === null || playList === void 0 ? void 0 : playList.items[playList.currentIndex].itemSource : nexenSource : nexenSource;

  if (newSource.poster) {
    posterDisabled.current = false;
  } else {
    posterDisabled.current = true;
  }

  const newStyle = fullScreen ? {
    position: 'absolute',
    width: '100%',
    height: '100%',
    top: 0,
    left: 0,
    zIndex: 9999
  } : {
    position: 'relative'
  };
  return /*#__PURE__*/React.createElement(View, {
    style: [styles.playerContainer, style, newStyle],
    onLayout: _onLayoutChange
  }, nexenConfig !== null && nexenConfig !== void 0 && nexenConfig.optimize ? (nexenConfig === null || nexenConfig === void 0 ? void 0 : nexenConfig.index) === (nexenConfig === null || nexenConfig === void 0 ? void 0 : nexenConfig.activeIndex) ? /*#__PURE__*/React.createElement(Video, {
    ref: videoRef,
    style: styles.player,
    source: newSource.source,
    shouldPlay: !paused,
    isMuted: nexenConfig === null || nexenConfig === void 0 ? void 0 : nexenConfig.muted,
    volume: (nexenConfig === null || nexenConfig === void 0 ? void 0 : nexenConfig.volume) / 100,
    isLooping: nexenConfig === null || nexenConfig === void 0 ? void 0 : nexenConfig.repeat,
    rate: Number(nexenConfig === null || nexenConfig === void 0 ? void 0 : nexenConfig.playbackSpeed),
    resizeMode: getKeyByValue(nexenConfig === null || nexenConfig === void 0 ? void 0 : nexenConfig.resizeMode),
    progressUpdateIntervalMillis: 500,
    onLoadStart: _onLoadStart,
    onLoad: _onLoad,
    onPlaybackStatusUpdate: _onPlaybackStatusUpdate,
    onError: _onError
  }) : null : /*#__PURE__*/React.createElement(Video, {
    ref: videoRef,
    style: styles.player,
    source: newSource.source,
    shouldPlay: !paused,
    isMuted: nexenConfig === null || nexenConfig === void 0 ? void 0 : nexenConfig.muted,
    volume: (nexenConfig === null || nexenConfig === void 0 ? void 0 : nexenConfig.volume) / 100,
    isLooping: nexenConfig === null || nexenConfig === void 0 ? void 0 : nexenConfig.repeat,
    rate: Number(nexenConfig === null || nexenConfig === void 0 ? void 0 : nexenConfig.playbackSpeed),
    resizeMode: getKeyByValue(nexenConfig === null || nexenConfig === void 0 ? void 0 : nexenConfig.resizeMode),
    progressUpdateIntervalMillis: 500,
    onLoadStart: _onLoadStart,
    onLoad: _onLoad,
    onPlaybackStatusUpdate: _onPlaybackStatusUpdate,
    onError: _onError
  }), !posterDisabled.current && showPoster.current && !error && /*#__PURE__*/React.createElement(PosterView, {
    posterSource: newSource.poster,
    posterResizeMode: nexenConfig === null || nexenConfig === void 0 ? void 0 : nexenConfig.posterResizeMode
  }), /*#__PURE__*/React.createElement(GestureView, {
    fullScreen: fullScreen,
    locked: locked,
    error: error,
    isSeeking: isSeeking,
    isSliding: isSliding,
    isSeekable: isSeekable,
    gestureEnabled: gestureEnabled,
    durationTime: durationTime,
    currentTime: currentTime,
    dimension: dimension,
    playerConfig: nexenConfig,
    nexenTheme: nexenTheme,
    onTapDetected: _onTapDetected,
    onGestureMove: _onGestureMove,
    onGestureEnd: _onGestureEnd
  }), /*#__PURE__*/React.createElement(React.Fragment, null, showControl && /*#__PURE__*/React.createElement(HeaderControl, {
    ref: headerControlRef,
    title: newSource.title,
    opacity: headerOpacity,
    marginTop: headerTopMargin,
    fullScreen: fullScreen,
    locked: locked,
    insets: insets,
    playerConfig: nexenConfig,
    nexenTheme: nexenTheme,
    onBackPress: _onBackPress,
    onAspectRatioPress: _onAspectRatioPress,
    onMorePress: _onMorePress
  }), showControl && /*#__PURE__*/React.createElement(FooterControl, {
    ref: footerControlRef,
    opacity: footerOpacity,
    marginBottom: footerBottomMargin,
    fullScreen: fullScreen,
    locked: locked,
    insets: insets,
    playerConfig: nexenConfig,
    nexenTheme: nexenTheme,
    paused: paused,
    isSeekable: isSeekable,
    isVolumeSeekable: isVolumeSeekable,
    trackTime: trackInfo.trackTime,
    cachedTrackTime: trackInfo.cachedTrackTime,
    totalTrackTime: trackInfo.totalTrackTime,
    totalVolume: MAX_VOLUME,
    disablePlaylistAndSkip: disablePlaylistAndSkip,
    onPlayPress: _onTogglePlayPause,
    onStopPress: _onStopPress,
    onReloadPress: _onReloadPress,
    onFullScreenPress: _onToggleFullScreen,
    onVolumePress: _onToggleVolume,
    onAspectRatioPress: _onAspectRatioPress,
    onRewind: _onRewind,
    onFastForward: _onFastForward,
    onSkipNext: _onSkipNext,
    onSkipBack: _onSkipBack,
    onSeekStart: _onSeekStart,
    onSeekUpdate: _onSeekUpdate,
    onSeekEnd: _onSeekEnd,
    onVolumeSeekStart: _onVolumeSeekStart,
    onVolumeSeekUpdate: _onVolumeSeekUpdate,
    onVolumeSeekEnd: _onVolumeSeekEnd,
    onSlideStart: _onSlideStart,
    onSlideEnd: _onSlideEnd,
    onReachedToStart: _onReachedToStart,
    onReachedToEnd: _onReachedToEnd
  }), !showControl && !showMoreControl && !showSpeedControl && !showPlaylistControl && /*#__PURE__*/React.createElement(LineSeekBar, {
    trackTime: trackInfo.trackTime,
    totalTrackTime: trackInfo.totalTrackTime,
    layoutWidth: dimension.width,
    theme: lineSeekBarTheme
  }), showMoreControl && /*#__PURE__*/React.createElement(MoreControl, {
    ref: moreControlRef,
    animateFrom: 'RIGHT',
    distance: MORE_CONTROL_CONTAINER_WIDTH,
    style: {
      width: MORE_CONTROL_CONTAINER_WIDTH,
      backgroundColor: CONTAINER_BACKGROUND_COLOR,
      borderTopLeftRadius: CONTAINER_BORDER_RADIUS,
      borderBottomLeftRadius: CONTAINER_BORDER_RADIUS
    },
    fullScreen: fullScreen,
    disablePlaylistAndSkip: disablePlaylistAndSkip,
    insets: insets,
    playerConfig: nexenConfig,
    nexenTheme: nexenTheme,
    onItemPress: _onMoreItemPress
  }), showSpeedControl && /*#__PURE__*/React.createElement(SpeedControl, {
    ref: speedControlRef,
    animateFrom: 'BOTTOM',
    distance: SPEED_CONTROL_CONTAINER_HEIGHT,
    style: {
      height: SPEED_CONTROL_CONTAINER_HEIGHT,
      backgroundColor: CONTAINER_BACKGROUND_COLOR,
      borderTopLeftRadius: CONTAINER_BORDER_RADIUS,
      borderTopRightRadius: CONTAINER_BORDER_RADIUS
    },
    fullScreen: fullScreen,
    insets: insets,
    currentSpeed: nexenConfig === null || nexenConfig === void 0 ? void 0 : nexenConfig.playbackSpeed,
    nexenTheme: nexenTheme,
    onSpeedChange: _onSpeedUpdate
  }), showPlaylistControl && /*#__PURE__*/React.createElement(PlaylistControl, {
    ref: playlistControlRef,
    animateFrom: 'BOTTOM',
    distance: PLAYLIST_CONTROL_CONTAINER_HEIGHT,
    style: {
      height: PLAYLIST_CONTROL_CONTAINER_HEIGHT,
      backgroundColor: CONTAINER_BACKGROUND_COLOR,
      borderTopLeftRadius: CONTAINER_BORDER_RADIUS,
      borderTopRightRadius: CONTAINER_BORDER_RADIUS
    },
    playlist: playList === null || playList === void 0 ? void 0 : playList.items,
    playlistIndex: playList === null || playList === void 0 ? void 0 : playList.currentIndex,
    fullScreen: fullScreen,
    nexenTheme: nexenTheme,
    insets: insets,
    onPlaylistItemPress: _onPlaylistItemPress
  }), paused && !showControl && !showMoreControl && !showSpeedControl && !showPlaylistControl && !loading && !locked && !error && !(nexenConfig !== null && nexenConfig !== void 0 && nexenConfig.disableOnScreenPlayButton) && /*#__PURE__*/React.createElement(PlayButton, {
    dimension: dimension,
    onPlayPress: _onPlayButtonPress
  }), !error && loading && /*#__PURE__*/React.createElement(Loader, {
    style: {
      backgroundColor: CONTAINER_BACKGROUND_COLOR,
      borderRadius: CONTAINER_BORDER_RADIUS
    },
    theme: loaderTheme,
    loaderText: nexenConfig === null || nexenConfig === void 0 ? void 0 : nexenConfig.loaderText
  }), (nexenConfig === null || nexenConfig === void 0 ? void 0 : nexenConfig.layoutMode) !== 'basic' && /*#__PURE__*/React.createElement(TipView, {
    ref: tipViewRef,
    style: {
      backgroundColor: CONTAINER_BACKGROUND_COLOR,
      borderRadius: CONTAINER_BORDER_RADIUS
    },
    theme: tipViewTheme
  })));
});
export default NexenPlayer;
NexenPlayer.defaultProps = {
  playList: {
    items: [],
    currentIndex: 0
  },
  insets: {
    left: 0,
    top: 0,
    right: 0,
    bottom: 0
  }
};
const styles = StyleSheet.create({
  playerContainer: {
    position: 'relative',
    width: '100%',
    height: '100%',
    overflow: 'hidden',
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: '#0a0a0a'
  },
  player: {
    width: '100%',
    height: '100%'
  }
});
//# sourceMappingURL=NexenPlayer.js.map