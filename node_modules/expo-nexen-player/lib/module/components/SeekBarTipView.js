import React, { useImperativeHandle } from 'react';
import { Animated, StyleSheet, Text, View } from 'react-native';
import ModalView from './ModalView';
const SeekBarTipView = /*#__PURE__*/React.forwardRef((props, ref) => {
  const {
    dimension,
    barHeight,
    heightPercentage,
    icon,
    parentStyle,
    style,
    theme
  } = props;
  const [state, setState] = React.useState({
    showTip: false,
    tipText: '',
    autoHide: false,
    icon
  });
  const timer = React.useRef();
  useImperativeHandle(ref, () => ({
    updateState: newState => {
      setState({ ...state,
        ...newState
      });
    }
  }));
  const textStyle = {
    color: theme === null || theme === void 0 ? void 0 : theme.textColor,
    fontSize: theme === null || theme === void 0 ? void 0 : theme.textSize,
    fontFamily: theme === null || theme === void 0 ? void 0 : theme.font
  };
  const seekBarStyle = {
    backgroundColor: theme === null || theme === void 0 ? void 0 : theme.barColor,
    height: barHeight
  };
  const seekBarUnderlayStyle = {
    backgroundColor: theme === null || theme === void 0 ? void 0 : theme.underlayColor,
    height: dimension.height * heightPercentage
  };
  React.useEffect(() => {
    if (state.autoHide) {
      if (timer.current) {
        clearTimeout(timer.current);
      }

      if (state.showTip) {
        timer.current = setTimeout(() => {
          setState({ ...state,
            showTip: false,
            tipText: ''
          });
        }, 1200);
      }
    }
  }, [state]);
  return /*#__PURE__*/React.createElement(React.Fragment, null, state.showTip && /*#__PURE__*/React.createElement(View, {
    style: [styles.parent, parentStyle]
  }, /*#__PURE__*/React.createElement(ModalView, {
    style: [styles.container, style]
  }, /*#__PURE__*/React.createElement(Text, {
    style: [styles.text, textStyle]
  }, state.tipText), /*#__PURE__*/React.createElement(View, {
    style: styles.barContainer
  }, /*#__PURE__*/React.createElement(View, {
    style: [styles.seekBarUnderlay, seekBarUnderlayStyle]
  }, /*#__PURE__*/React.createElement(Animated.View, {
    style: [styles.seekBar, seekBarStyle]
  }))), /*#__PURE__*/React.createElement(View, {
    style: styles.iconContainer
  }, state.icon))));
});
export default SeekBarTipView;
const styles = StyleSheet.create({
  parent: {
    position: 'absolute',
    top: 0,
    bottom: 0,
    justifyContent: 'center',
    alignItems: 'center'
  },
  container: {
    paddingHorizontal: 12,
    paddingVertical: 12
  },
  barContainer: {
    paddingVertical: 4,
    justifyContent: 'center',
    alignItems: 'center'
  },
  seekBar: {
    position: 'absolute',
    width: 6,
    height: 60
  },
  seekBarUnderlay: {
    width: 6,
    height: 100,
    borderRadius: 3,
    overflow: 'hidden',
    justifyContent: 'flex-end'
  },
  text: {
    minWidth: 35,
    fontSize: 12,
    fontWeight: '600',
    textAlign: 'center',
    opacity: 0.8
  },
  iconContainer: {
    paddingHorizontal: 4,
    opacity: 0.8
  }
});
//# sourceMappingURL=SeekBarTipView.js.map